{"version":3,"file":"static/js/403.1420991e.chunk.js","mappings":"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","sources":["../../../packages/uikit/dist/components/home/AccountView.js","../../../packages/uikit/dist/components/home/ReceiveNotification.js","../../../packages/uikit/dist/components/home/qrCodeView.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { BLOCKCHAIN_NAME } from '@tonkeeper/core/dist/entries/crypto';\nimport { formatAddress, formatTransferUrl } from '@tonkeeper/core/dist/utils/common';\nimport { useRef, useState } from 'react';\nimport { QRCode } from 'react-qrcode-logo';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport styled, { css } from 'styled-components';\nimport { useAppContext } from '../../hooks/appContext';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { useTranslation } from '../../hooks/translation';\nimport { useTronWalletState } from '../../state/tron/tron';\nimport { CopyIcon } from '../Icon';\nimport { FullHeightBlockResponsive, NotificationBlock, NotificationHeader, NotificationHeaderPortal, NotificationTitleRow } from '../Notification';\nimport { Body1, H3 } from '../Text';\nimport { Button } from '../fields/Button';\nimport { childFactoryCreator, duration, Wrapper } from '../transfer/common';\nimport { QrWrapper } from './qrCodeView';\nimport { useActiveTonNetwork, useActiveWallet, useIsActiveWalletWatchOnly } from '../../state/wallet';\nimport { AccountBadge } from '../account/AccountBadge';\nimport { useAssetImage } from '../../state/asset';\nimport { TON_ASSET } from '@tonkeeper/core/dist/entries/crypto/asset/constants';\nimport { Address } from '@ton/core';\nconst CopyBlock = styled.div `\n    display: flex;\n    align-items: center;\n`;\nexport const Background = styled.div `\n    padding: 20px;\n    width: 100%;\n    box-sizing: border-box;\n    border-radius: 20px;\n    background: white;\n    max-width: 300px;\n\n    ${props => props.margin &&\n    css `\n            margin-bottom: 16px;\n        `}\n\n    ${props => props.extension &&\n    css `\n            @media (max-width: 768px) {\n                max-width: 217px;\n                padding: 16px;\n            }\n        `}\n\n    canvas {\n        width: 100% !important;\n        height: 100% !important;\n        position: absolute;\n    }\n`;\nexport const AddressText = styled(Body1) `\n    display: inline-block;\n    word-break: break-all;\n    color: black;\n    margin: 16px 4px 0;\n    text-align: center;\n    font-family: ${p => p.theme.fontMono};\n\n    ${props => props.extension &&\n    css `\n            @media (max-width: 768px) {\n                margin-top: 8px;\n            }\n        `}\n`;\nconst TextBlock = styled.div `\n    display: flex;\n    padding-bottom: 16px;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n\n    ${props => props.extension &&\n    css `\n            @media (max-width: 768px) {\n                padding-bottom: 0;\n            }\n        `}\n`;\nconst Title = styled(H3) `\n    text-align: center;\n`;\nconst Description = styled(Body1) `\n    text-align: center;\n    color: ${props => props.theme.textSecondary};\n`;\nconst WatchOnlyBadge = styled(AccountBadge) `\n    width: fit-content;\n    margin: 0 auto 10px;\n`;\n/*const values = [\n    { name: BLOCKCHAIN_NAME.TON, id: BLOCKCHAIN_NAME.TON },\n    { name: 'TRC20', id: BLOCKCHAIN_NAME.TRON }\n];*/\nexport const HeaderBlock = ({ title, description }) => {\n    const { extension } = useAppContext();\n    return (_jsxs(TextBlock, { extension: extension, children: [title && _jsx(Title, { children: title }), _jsx(Description, { children: description })] }));\n};\nconst CopyButton = ({ address }) => {\n    const sdk = useAppSdk();\n    const { t } = useTranslation();\n    return (_jsx(CopyBlock, { children: _jsxs(Button, { secondary: true, onClick: e => {\n                e.preventDefault();\n                sdk.copyToClipboard(address, t('address_copied'));\n            }, children: [_jsx(CopyIcon, {}), _jsx(\"span\", { children: t('Copy_address') })] }) }));\n};\nconst ReceiveTon = ({ jetton }) => {\n    const sdk = useAppSdk();\n    const { extension } = useAppContext();\n    const wallet = useActiveWallet();\n    const isWatchOnly = useIsActiveWalletWatchOnly();\n    const { t } = useTranslation();\n    const network = useActiveTonNetwork();\n    const assetImage = useAssetImage({\n        blockchain: BLOCKCHAIN_NAME.TON,\n        address: jetton ? Address.parse(jetton) : TON_ASSET.address\n    });\n    const address = formatAddress(wallet.rawAddress, network);\n    return (_jsxs(NotificationBlock, { children: [_jsx(HeaderBlock, { title: t('receive_ton'), description: t('receive_ton_description') }), _jsxs(Background, { extension: extension, onClick: e => {\n                    e.preventDefault();\n                    sdk.copyToClipboard(address, t('address_copied'));\n                }, children: [isWatchOnly && _jsx(WatchOnlyBadge, { accountType: \"watch-only\" }), _jsx(QrWrapper, { children: _jsx(QRCode, { size: 400, value: formatTransferUrl({\n                                address,\n                                jetton\n                            }), logoImage: assetImage || 'https://wallet.tonkeeper.com/img/toncoin.svg', logoPadding: 8, qrStyle: \"dots\", eyeRadius: {\n                                inner: 2,\n                                outer: 16\n                            } }) }), _jsx(AddressText, { extension: extension, children: address })] }), _jsx(CopyButton, { address: address })] }));\n};\nconst ReceiveTron = ({ tron }) => {\n    const sdk = useAppSdk();\n    const { t } = useTranslation();\n    const { extension } = useAppContext();\n    return (_jsxs(NotificationBlock, { children: [_jsx(HeaderBlock, { title: t('receive_trc20'), description: t('receive_trc20_description') }), _jsxs(Background, { extension: extension, onClick: e => {\n                    e.preventDefault();\n                    sdk.copyToClipboard(tron.walletAddress, t('address_copied'));\n                }, children: [_jsx(QrWrapper, { children: _jsx(QRCode, { size: 400, value: tron.walletAddress, logoImage: \"https://wallet-dev.tonkeeper.com/img/usdt.svg\", logoPadding: 8, qrStyle: \"dots\", eyeRadius: {\n                                inner: 2,\n                                outer: 16\n                            } }) }), _jsx(AddressText, { extension: extension, children: tron.walletAddress })] }), _jsx(CopyButton, { address: tron.walletAddress })] }));\n};\nexport const ReceiveContent = ({ chain = BLOCKCHAIN_NAME.TON, jetton, handleClose }) => {\n    const { standalone } = useAppContext();\n    const [active] = useState(chain);\n    const { data: tron } = useTronWalletState(active === BLOCKCHAIN_NAME.TRON);\n    const tonRef = useRef(null);\n    const tronRef = useRef(null);\n    const isTon = active === BLOCKCHAIN_NAME.TON || !tron;\n    const nodeRef = isTon ? tonRef : tronRef;\n    const state = isTon ? 'ton' : 'tron';\n    return (_jsxs(FullHeightBlockResponsive, { standalone: standalone, children: [_jsx(NotificationHeaderPortal, { children: _jsx(NotificationHeader, { children: _jsx(NotificationTitleRow, { handleClose: handleClose, center: true }) }) }), _jsx(Wrapper, { standalone: false, extension: true, fullWidth: true, children: _jsx(TransitionGroup, { childFactory: childFactoryCreator(!isTon), children: _jsx(CSSTransition, { nodeRef: nodeRef, classNames: \"right-to-left\", addEndListener: done => {\n                            setTimeout(done, duration);\n                        }, children: _jsx(\"div\", { ref: nodeRef, children: isTon ? (_jsx(ReceiveTon, { jetton: jetton?.toLowerCase() ===\n                                    TON_ASSET.address.toString().toLowerCase()\n                                    ? undefined\n                                    : jetton })) : (_jsx(ReceiveTron, { tron: tron })) }) }, state) }) })] }));\n};\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { Notification } from '../Notification';\nimport { ReceiveContent } from './AccountView';\nconst ReceiveNotification = () => {\n    const sdk = useAppSdk();\n    const [params, setParams] = useState(undefined);\n    const handleClose = () => {\n        setParams(undefined);\n    };\n    useEffect(() => {\n        const handler = (options) => {\n            setParams(options.params);\n        };\n        sdk.uiEvents.on('receive', handler);\n        return () => {\n            sdk.uiEvents.off('receive', handler);\n        };\n    }, []);\n    const Content = useCallback(() => {\n        if (!params)\n            return undefined;\n        return (_jsx(ReceiveContent, { chain: params.chain, jetton: params.jetton, handleClose: handleClose }));\n    }, [params, handleClose]);\n    return (_jsx(Notification, { isOpen: params != undefined, handleClose: handleClose, backShadow: true, hideButton: true, children: Content }));\n};\nexport default ReceiveNotification;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport UREncoder from '@ngraveio/bc-ur/dist/urEncoder';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { QRCode } from 'react-qrcode-logo';\nimport { styled } from 'styled-components';\nexport const QrWrapper = styled.div `\n    width: 100%;\n    padding-bottom: 100%;\n    position: relative;\n`;\nfunction chunks(arr, len) {\n    var chunks = [], i = 0, n = arr.length;\n    while (i < n) {\n        chunks.push(arr.slice(i, (i += len)));\n    }\n    return chunks;\n}\nexport const AnimatedQrCode = React.memo(({ message }) => {\n    const [value, setValue] = useState('');\n    useEffect(() => {\n        let arr = [...message];\n        const items = chunks(arr, 256);\n        if (items.length === 1) {\n            setValue(message);\n        }\n        else {\n            let count = 0;\n            const timer = setInterval(() => {\n                let current = items[count];\n                setValue(current.join(''));\n                // increment our counter\n                count++;\n                // reset counter if we reach end of array\n                if (count === items.length) {\n                    count = 0;\n                }\n            }, 100);\n            return () => clearInterval(timer);\n        }\n    }, [message]);\n    return (_jsx(QrWrapper, { children: _jsx(QRCode, { size: 400, value: value, qrStyle: \"dots\", eyeRadius: {\n                inner: 2,\n                outer: 16\n            } }) }));\n});\nexport const KeystoneAnimatedQRCode = ({ data }) => {\n    const urEncoder = useMemo(() => {\n        return new UREncoder(data);\n    }, []);\n    const [value, setValue] = useState(urEncoder.nextPart());\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setValue(urEncoder.nextPart().toUpperCase());\n        }, 200);\n        return () => {\n            clearInterval(interval);\n        };\n    }, []);\n    return (_jsx(QrWrapper, { children: _jsx(QRCode, { size: 400, value: value, qrStyle: \"dots\", eyeRadius: {\n                inner: 2,\n                outer: 16\n            } }) }));\n};\n"],"names":["CopyBlock","styled","div","_templateObject","_taggedTemplateLiteral","Background","_templateObject2","props","margin","css","_templateObject3","extension","_templateObject4","AddressText","Body1","_templateObject5","p","theme","fontMono","_templateObject6","TextBlock","_templateObject7","_templateObject8","Title","H3","_templateObject9","Description","_templateObject10","textSecondary","WatchOnlyBadge","AccountBadge","_templateObject11","HeaderBlock","_ref","title","description","useAppContext","_jsxs","children","_jsx","CopyButton","_ref2","address","sdk","useAppSdk","t","useTranslation","Button","secondary","onClick","e","preventDefault","copyToClipboard","CopyIcon","ReceiveTon","_ref3","jetton","wallet","useActiveWallet","isWatchOnly","useIsActiveWalletWatchOnly","network","useActiveTonNetwork","assetImage","useAssetImage","blockchain","BLOCKCHAIN_NAME","TON","Address","parse","TON_ASSET","formatAddress","rawAddress","NotificationBlock","accountType","QrWrapper","QRCode","size","value","formatTransferUrl","logoImage","logoPadding","qrStyle","eyeRadius","inner","outer","ReceiveTron","_ref4","tron","walletAddress","ReceiveContent","_ref5","chain","handleClose","standalone","active","useState","data","useTronWalletState","TRON","tonRef","useRef","tronRef","isTon","nodeRef","state","FullHeightBlockResponsive","NotificationHeaderPortal","NotificationHeader","NotificationTitleRow","center","Wrapper","fullWidth","TransitionGroup","childFactory","childFactoryCreator","CSSTransition","classNames","addEndListener","done","setTimeout","duration","ref","toLowerCase","toString","undefined","ReceiveNotification","params","setParams","useEffect","handler","options","uiEvents","on","off","Content","useCallback","Notification","isOpen","backShadow","hideButton","React","message","setValue","items","arr","len","chunks","i","n","length","push","slice","count","timer","setInterval","current","join","clearInterval","KeystoneAnimatedQRCode","urEncoder","useMemo","UREncoder","nextPart","interval","toUpperCase"],"sourceRoot":""}