{"version":3,"file":"static/js/931.f4794b8f.chunk.js","mappings":"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","sources":["../../../packages/uikit/dist/components/shared/ScanQR.js","../../../packages/uikit/dist/components/QrScanner.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { BrowserQRCodeReader } from '@zxing/browser';\nimport { memo, useCallback, useEffect, useMemo, useRef } from 'react';\nimport styled, { css } from 'styled-components';\nexport function createImgSize(size) {\n    if (!size) {\n        return {\n            aspectRatio: '1 / 1',\n            width: '100%'\n        };\n    }\n    const height = typeof size === 'string' ? size : `${size}px`;\n    return {\n        height,\n        width: height\n    };\n}\nconst DEFAULT_DELAY = 150;\nfunction Scan({ className = '', delay = DEFAULT_DELAY, onError = console.error, onScan, size, style = {} }) {\n    const videoRef = useRef(null);\n    const controlsRef = useRef(null);\n    const containerStyle = useMemo(() => createImgSize(size), [size]);\n    const _onError = useCallback((error) => onError(error), [onError]);\n    useEffect(() => {\n        const codeReader = new BrowserQRCodeReader();\n        const startScanning = async () => {\n            try {\n                const videoInputDevices = await BrowserQRCodeReader.listVideoInputDevices();\n                const selectedDeviceId = videoInputDevices[0].deviceId;\n                controlsRef.current = await codeReader.decodeFromVideoDevice(selectedDeviceId, videoRef.current ?? undefined, (result, error) => {\n                    if (result) {\n                        onScan(result.getText());\n                    }\n                    if (error && !(error instanceof Error)) {\n                        _onError(new Error(error));\n                    }\n                });\n            }\n            catch (error) {\n                _onError(error instanceof Error ? error : new Error('Unknown error occurred'));\n            }\n        };\n        const timeoutId = setTimeout(startScanning, delay);\n        return () => {\n            clearTimeout(timeoutId);\n            if (controlsRef.current) {\n                controlsRef.current.stop();\n            }\n        };\n    }, [onScan, _onError, delay]);\n    return (_jsx(StyledDiv, { className: className, style: containerStyle, windowWidth: window.innerWidth, children: _jsx(\"video\", { ref: videoRef, style: style }) }));\n}\nconst StyledDiv = styled.div `\n    overflow: hidden;\n    position: relative;\n\n    &::before {\n        z-index: 0;\n        content: '';\n        display: block;\n        position: absolute;\n        inset: 0;\n        background: ${p => p.theme.textSecondary};\n    }\n\n    &::after {\n        z-index: 2;\n        content: '';\n        display: block;\n        position: absolute;\n        inset: 0;\n        border: 50px solid ${p => p.theme.backgroundOverlayLight};\n        box-shadow: ${p => p.theme.textTertiary} 0 0 0 5px inset;\n    }\n\n    video {\n        z-index: 1;\n        position: relative;\n        display: inline-block;\n        height: 100%;\n        transform: matrix(-1, 0, 0, 1, 0, 0);\n        width: 100%;\n        object-fit: cover;\n\n        ${props => props.windowWidth <= 440 &&\n    css `\n                transform: none !important;\n            `}\n    }\n`;\nexport const ScanQR = memo(Scan);\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { useAppContext } from '../hooks/appContext';\nimport { useAppSdk } from '../hooks/appSdk';\nimport { useTranslation } from '../hooks/translation';\nimport { FullHeightBlock, Notification } from './Notification';\nimport { ScanQR } from './shared/ScanQR';\nconst Block = styled.div `\n    margin: 0 -1rem;\n    width: calc(100% + 2rem);\n`;\nconst QrScanner = () => {\n    const [scanId, setScanId] = useState(undefined);\n    const sdk = useAppSdk();\n    const { standalone, ios } = useAppContext();\n    const { t } = useTranslation();\n    useEffect(() => {\n        const handler = (options) => {\n            setScanId(options.id);\n        };\n        sdk.uiEvents.on('scan', handler);\n        return () => {\n            sdk.uiEvents.off('scan', handler);\n        };\n    }, []);\n    const onCancel = () => {\n        setScanId(undefined);\n    };\n    const onScan = useMemo(() => {\n        return (data) => {\n            sdk.uiEvents.emit('response', {\n                method: 'response',\n                id: scanId,\n                params: data\n            });\n            setScanId(undefined);\n        };\n    }, [sdk, scanId, setScanId]);\n    const isOpen = scanId !== undefined;\n    const Content = useCallback(() => {\n        return (_jsx(FullHeightBlock, { standalone: standalone, children: _jsx(Block, { children: isOpen && (_jsx(ScanQR, { onScan: onScan, onError: e => {\n                        sdk.uiEvents.emit('copy', {\n                            method: 'copy',\n                            id: scanId,\n                            params: e.message\n                        });\n                    } })) }) }));\n    }, [isOpen, onScan, standalone, ios]);\n    return (_jsx(Notification, { isOpen: isOpen, handleClose: onCancel, title: t('scan_qr_title'), children: Content }));\n};\nexport default QrScanner;\n"],"names":["DEFAULT_DELAY","StyledDiv","styled","div","_templateObject","_taggedTemplateLiteral","p","theme","textSecondary","backgroundOverlayLight","textTertiary","props","windowWidth","css","_templateObject2","ScanQR","memo","_ref","className","delay","onError","console","error","onScan","size","style","videoRef","useRef","controlsRef","containerStyle","useMemo","aspectRatio","width","height","concat","createImgSize","_onError","useCallback","useEffect","codeReader","BrowserQRCodeReader","timeoutId","setTimeout","async","_videoRef$current","selectedDeviceId","listVideoInputDevices","deviceId","current","decodeFromVideoDevice","undefined","result","getText","Error","clearTimeout","stop","_jsx","window","innerWidth","children","ref","Block","QrScanner","scanId","setScanId","useState","sdk","useAppSdk","standalone","ios","useAppContext","t","useTranslation","handler","options","id","uiEvents","on","off","data","emit","method","params","isOpen","Content","FullHeightBlock","e","message","Notification","handleClose","onCancel","title"],"sourceRoot":""}