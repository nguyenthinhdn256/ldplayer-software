{"version":3,"file":"static/js/580.41f2d212.chunk.js","mappings":"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","sources":["../../../packages/core/dist/entries/nft.js","../../../packages/uikit/dist/hooks/blockchain/nft/useAreNftActionsDisabled.js","../../../packages/uikit/dist/hooks/blockchain/nft/useEstimateNftLink.js","../../../packages/uikit/dist/hooks/blockchain/nft/useLinkNft.js","../../../packages/uikit/dist/hooks/useQueryChangeWait.js","../../../packages/uikit/dist/components/nft/LinkNft.js","../../../packages/uikit/dist/components/nft/RenewNft.js","../../../packages/uikit/dist/hooks/blockchain/nft/useEstimateNftRenew.js","../../../packages/uikit/dist/hooks/blockchain/nft/useRenewNft.js","../../../packages/uikit/dist/components/nft/NftAction.js","../../../packages/uikit/dist/components/nft/NftDetails.js","../../../packages/uikit/dist/components/nft/NftView.js","../../../packages/uikit/dist/components/nft/NftNotification.js","../../../packages/uikit/dist/components/nft/Nfts.js","../../../packages/uikit/dist/hooks/blockchain/useTonRecipient.js","../../../packages/uikit/dist/hooks/dateFormat.js"],"sourcesContent":["export function isNFTDNS(nft) {\n    return !!nft.dns;\n}\n","import { seeIfAddressEqual } from '@tonkeeper/core/dist/utils/common';\nimport { useActiveWallet } from '../../../state/wallet';\nexport function useAreNftActionsDisabled(nft) {\n    const wallet = useActiveWallet();\n    return nft.sale !== undefined || !seeIfAddressEqual(wallet.rawAddress, nft.owner?.address);\n}\n","import { useQuery } from '@tanstack/react-query';\nimport { EXTERNAL_SENDER_CHOICE, useGetEstimationSender } from '../useSender';\nimport { useTonRawTransactionService } from '../useBlockchainService';\nimport { NFTEncoder } from '@tonkeeper/core/dist/service/ton-blockchain/encoder/nft-encoder';\nimport { useActiveAccount } from '../../../state/wallet';\nimport { useToQueryKeyPart } from '../../useToQueryKeyPart';\nexport const useEstimateNftLink = (args) => {\n    const getSender = useGetEstimationSender(EXTERNAL_SENDER_CHOICE);\n    const getSenderKey = useToQueryKeyPart(getSender);\n    const rawTransactionService = useTonRawTransactionService();\n    const activeAccount = useActiveAccount();\n    const walletAddress = activeAccount.activeTonWallet.rawAddress;\n    return useQuery([\n        'estimate-link-nft',\n        args.nftAddress,\n        args.linkToAddress,\n        rawTransactionService,\n        getSenderKey,\n        walletAddress\n    ], async () => {\n        const nftEncoder = new NFTEncoder(walletAddress);\n        return rawTransactionService.estimate(await getSender(), nftEncoder.encodeNftLink(args));\n    }, {\n        enabled: !!getSender\n    });\n};\n","import { EXTERNAL_SENDER_CHOICE, useGetSender } from '../useSender';\nimport { useTonRawTransactionService } from '../useBlockchainService';\nimport { useActiveAccount } from '../../../state/wallet';\nimport { useMutation } from '@tanstack/react-query';\nimport { NFTEncoder } from '@tonkeeper/core/dist/service/ton-blockchain/encoder/nft-encoder';\nimport { zeroFee } from '@tonkeeper/core/dist/service/ton-blockchain/utils';\nimport { useTransactionAnalytics } from '../../amplitude';\nexport const useLinkNft = (args) => {\n    const getSender = useGetSender();\n    const rawTransactionService = useTonRawTransactionService();\n    const activeAccount = useActiveAccount();\n    const track2 = useTransactionAnalytics();\n    const walletAddress = activeAccount.activeTonWallet.rawAddress;\n    return useMutation(async () => {\n        const nftEncoder = new NFTEncoder(walletAddress);\n        await rawTransactionService.send(await getSender(EXTERNAL_SENDER_CHOICE), zeroFee, nftEncoder.encodeNftLink(args));\n        track2('link-dns');\n        return true;\n    });\n};\n","import { useEffect, useRef, useState } from 'react';\nexport function useQueryChangeWait(query, shouldExit) {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isCompleted, setIsCompleted] = useState(false);\n    const [dispose, setDispose] = useState(false);\n    const prev = useRef(query.data);\n    const waitRecursive = async () => {\n        const result = await query.refetch();\n        if (dispose) {\n            setIsLoading(false);\n        }\n        if (shouldExit(result.data, prev.current)) {\n            setIsLoading(false);\n            setIsCompleted(true);\n            return;\n        }\n        prev.current = result.data;\n        setTimeout(waitRecursive, 1000);\n    };\n    useEffect(() => () => setDispose(true), []);\n    return {\n        isLoading,\n        isCompleted,\n        data: query.data,\n        refetch: (timeLimit = 10000) => {\n            prev.current = query.data;\n            setIsLoading(true);\n            setDispose(false);\n            setIsCompleted(false);\n            setTimeout(() => {\n                if (isLoading) {\n                    setDispose(true);\n                }\n            }, timeLimit);\n            waitRecursive();\n        }\n    };\n}\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { Address } from '@ton/core';\nimport { AssetAmount } from '@tonkeeper/core/dist/entries/crypto/asset/asset-amount';\nimport { TON_ASSET } from '@tonkeeper/core/dist/entries/crypto/asset/constants';\nimport { isStandardTonWallet } from '@tonkeeper/core/dist/entries/wallet';\nimport { getWalletsAddresses } from '@tonkeeper/core/dist/service/walletService';\nimport { areEqAddresses, formatAddress, toShortValue } from '@tonkeeper/core/dist/utils/common';\nimport { isTMEDomain } from '@tonkeeper/core/dist/utils/nft';\nimport BigNumber from 'bignumber.js';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { useAreNftActionsDisabled } from '../../hooks/blockchain/nft/useAreNftActionsDisabled';\nimport { useEstimateNftLink } from '../../hooks/blockchain/nft/useEstimateNftLink';\nimport { useLinkNft } from '../../hooks/blockchain/nft/useLinkNft';\nimport { useTonRecipient } from '../../hooks/blockchain/useTonRecipient';\nimport { useTranslation } from '../../hooks/translation';\nimport { useQueryChangeWait } from '../../hooks/useQueryChangeWait';\nimport { useActiveTonNetwork, useActiveWallet } from '../../state/wallet';\nimport { ColumnText, Gap } from '../Layout';\nimport { ListItem, ListItemPayload } from '../List';\nimport { Notification, NotificationBlock } from '../Notification';\nimport { Body1, Body2 } from '../Text';\nimport { Label } from '../activity/NotificationCommon';\nimport { Button } from '../fields/Button';\nimport { Input } from '../fields/Input';\nimport { ConfirmView, ConfirmViewButtons, ConfirmViewButtonsSlot, ConfirmViewDetailsAmount, ConfirmViewDetailsFee, ConfirmViewDetailsSlot, ConfirmViewHeadingSlot, ConfirmViewTitleSlot } from '../transfer/ConfirmView';\nimport { ConfirmAndCancelMainButton } from '../transfer/common';\nimport { useNftDNSLinkData } from '../../state/nft';\nimport { useNotifyErrorHandle, useToast } from '../../hooks/useNotification';\nexport const LinkNft = ({ nft }) => {\n    const toast = useToast();\n    const { t } = useTranslation();\n    const query = useNftDNSLinkData(nft);\n    const { data, isLoading } = query;\n    const linkedAddress = data?.wallet?.address || '';\n    const { refetch, isLoading: isWaitingForUpdate, isCompleted } = useQueryChangeWait(query, (current, prev) => !!prev?.wallet?.address !== !!current?.wallet?.address);\n    useEffect(() => {\n        if (isCompleted) {\n            toast(linkedAddress ? t('dns_address_linked') : t('dns_address_unlinked'));\n        }\n    }, [isCompleted, linkedAddress]);\n    if (!linkedAddress) {\n        return (_jsx(LinkNftUnlinked, { nft: nft, isLoading: isLoading || isWaitingForUpdate, refetch: refetch }));\n    }\n    return (_jsx(LinkNftLinked, { nft: nft, linkedAddress: linkedAddress, isLoading: isWaitingForUpdate, refetch: refetch }));\n};\nconst ReplaceButton = styled(Body2) `\n    cursor: pointer;\n    color: ${props => (!props.isDisabled ? props.theme.textAccent : props.theme.textSecondary)};\n    pointer-events: ${props => (props.isDisabled ? 'none' : 'unset')};\n`;\nconst dnsLinkAmount = new BigNumber(0.02);\nconst dnsLinkAssetAmount = AssetAmount.fromRelativeAmount({\n    asset: TON_ASSET,\n    amount: dnsLinkAmount\n});\nconst LinkNftUnlinked = ({ nft, isLoading, refetch }) => {\n    const notifyError = useNotifyErrorHandle();\n    const { t } = useTranslation();\n    const [openedView, setOpenedView] = useState();\n    const walletState = useActiveWallet();\n    const [linkToAddress, setLinkToAddress] = useState(walletState.rawAddress);\n    const onClose = (confirm) => {\n        if (openedView === 'wallet') {\n            return setOpenedView('confirm');\n        }\n        setOpenedView(undefined);\n        if (confirm) {\n            refetch();\n        }\n        else {\n            setLinkToAddress(walletState.rawAddress);\n        }\n    };\n    const { recipient, isLoading: isRecipientLoading } = useTonRecipient(nft.address);\n    const { refetch: refetchEstimateFee, ...estimation } = useEstimateNftLink({\n        nftAddress: nft.address,\n        linkToAddress\n    });\n    const onSaveLinkToAddress = useCallback(async (address) => {\n        setLinkToAddress(address);\n        await refetchEstimateFee();\n        setOpenedView('confirm');\n    }, [refetchEstimateFee, nft.address]);\n    const mutation = useLinkNft({\n        nftAddress: nft.address,\n        linkToAddress\n    });\n    const isSelectedCurrentAddress = areEqAddresses(linkToAddress, walletState.rawAddress);\n    const network = useActiveTonNetwork();\n    const confirmChild = () => (_jsxs(ConfirmView, { onClose: onClose, recipient: recipient, assetAmount: dnsLinkAssetAmount, fitContent: true, estimation: estimation, ...mutation, children: [_jsx(ConfirmViewTitleSlot, {}), _jsx(ConfirmViewHeadingSlot, {}), _jsxs(ConfirmViewDetailsSlot, { children: [_jsx(ListItem, { hover: false, children: _jsxs(ListItemPayload, { children: [_jsx(Label, { children: isSelectedCurrentAddress\n                                        ? t('dns_current_address')\n                                        : t('wallet_address') }), _jsx(ColumnText, { right: true, text: toShortValue(formatAddress(linkToAddress, network)), secondary: _jsx(ReplaceButton, { isDisabled: mutation.isLoading, onClick: () => setOpenedView('wallet'), children: t('replace') }) })] }) }), _jsx(ConfirmViewDetailsAmount, {}), _jsx(ConfirmViewDetailsFee, {})] }), _jsx(ConfirmViewButtonsSlot, { children: _jsx(ConfirmViewButtons, { MainButton: ConfirmAndCancelMainButton }) })] }));\n    const chooseWalletChild = useCallback(() => (_jsx(LinkNFTWalletView, { onSave: onSaveLinkToAddress, isLoading: estimation.isFetching, domain: nft.dns })), [onSaveLinkToAddress, estimation.isFetching]);\n    const isDisabled = useAreNftActionsDisabled(nft);\n    const onOpen = () => {\n        if (estimation.error) {\n            notifyError(estimation.error);\n            return;\n        }\n        setOpenedView('confirm');\n    };\n    const isTME = isTMEDomain(nft.dns);\n    return (_jsxs(_Fragment, { children: [_jsx(Button, { type: \"button\", size: \"large\", secondary: true, fullWidth: true, disabled: isDisabled, loading: estimation.isFetching || isRecipientLoading || isLoading, onClick: onOpen, children: isTME ? t('nft_link_username_button') : t('nft_link_domain_button') }), _jsx(Notification, { title: openedView === 'wallet'\n                    ? t('wallet_address')\n                    : t('send_screen_steps_comfirm_title'), isOpen: !!openedView, hideButton: true, handleClose: () => onClose(), backShadow: true, children: openedView === 'wallet' ? chooseWalletChild : confirmChild })] }));\n};\nconst WalletLabelStyled = styled(Body1) `\n    color: ${props => props.theme.textSecondary};\n    margin-bottom: 1.5rem;\n`;\nconst ChangeWalletContainerStyled = styled(NotificationBlock) `\n    align-items: flex-start;\n`;\nconst LinkNFTWalletView = ({ onSave, isLoading, domain }) => {\n    const { t } = useTranslation();\n    const [inputValue, setInputValue] = useState('');\n    const [wasSubmitted, setWasSubmitted] = useState(false);\n    const isInputValid = useMemo(() => {\n        if (!wasSubmitted) {\n            return true;\n        }\n        try {\n            Address.parse(inputValue);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }, [wasSubmitted, inputValue]);\n    const onSubmit = e => {\n        e.stopPropagation();\n        e.preventDefault();\n        setWasSubmitted(true);\n        try {\n            onSave(Address.parse(inputValue).toRawString());\n        }\n        catch (err) {\n            console.error(err);\n        }\n    };\n    return (_jsxs(ChangeWalletContainerStyled, { onSubmit: onSubmit, children: [_jsx(WalletLabelStyled, { children: t('add_dns_address').replace('%1%', domain) }), _jsx(Input, { id: \"dns-address\", disabled: isLoading, isValid: isInputValid, value: inputValue, onChange: setInputValue, label: t('wallet_address'), clearButton: true }), _jsx(Gap, {}), _jsx(Button, { fullWidth: true, size: \"large\", primary: true, disabled: !inputValue, loading: isLoading, children: \"Save\" })] }));\n};\nconst WarnTextStyled = styled(Body2) `\n    text-align: center;\n    color: ${props => props.theme.accentOrange};\n`;\nconst linkToAddress = '';\nconst LinkNftLinked = ({ nft, linkedAddress, isLoading, refetch }) => {\n    const notifyError = useNotifyErrorHandle();\n    const { t } = useTranslation();\n    const walletState = useActiveWallet();\n    const [isOpen, setIsOpen] = useState(false);\n    const onClose = (confirm) => {\n        setIsOpen(false);\n        if (confirm === true) {\n            refetch();\n        }\n    };\n    const { recipient, isLoading: isRecipientLoading } = useTonRecipient(nft.address);\n    const estimation = useEstimateNftLink({\n        nftAddress: nft.address,\n        linkToAddress\n    });\n    const mutation = useLinkNft({\n        nftAddress: nft.address,\n        linkToAddress\n    });\n    const child = () => (_jsxs(ConfirmView, { onClose: onClose, recipient: recipient, assetAmount: dnsLinkAssetAmount, fitContent: true, estimation: estimation, ...mutation, children: [_jsx(ConfirmViewTitleSlot, {}), _jsx(ConfirmViewHeadingSlot, {}), _jsxs(ConfirmViewDetailsSlot, { children: [_jsx(ConfirmViewDetailsAmount, {}), _jsx(ConfirmViewDetailsFee, {})] }), _jsx(ConfirmViewButtonsSlot, { children: _jsx(ConfirmViewButtons, { MainButton: ConfirmAndCancelMainButton }) })] }));\n    const isDisabled = useAreNftActionsDisabled(nft);\n    const isTME = isTMEDomain(nft.dns);\n    const onOpen = () => {\n        if (estimation.error) {\n            notifyError(estimation.error);\n            return;\n        }\n        setIsOpen(true);\n    };\n    const network = useActiveTonNetwork();\n    const isLinkedWithAnotherWallet = Object.values(isStandardTonWallet(walletState) ? getWalletsAddresses(walletState.publicKey, network) : {}).every(({ address }) => !areEqAddresses(address.toRawString(), linkedAddress));\n    return (_jsxs(_Fragment, { children: [_jsx(Button, { type: \"button\", size: \"large\", secondary: true, fullWidth: true, disabled: isDisabled, loading: estimation.isFetching || isRecipientLoading || isLoading, onClick: onOpen, children: t('nft_unlink_domain_button').replace('{{address}}', toShortValue(formatAddress(linkedAddress, network))) }), isLinkedWithAnotherWallet && !isLoading && (_jsx(WarnTextStyled, { children: isTME\n                    ? t('tme_linked_with_another_address_warn')\n                    : t('dns_linked_with_another_address_warn') })), _jsx(Notification, { title: t('confirm_unlink'), isOpen: isOpen, hideButton: true, handleClose: () => onClose(), backShadow: true, children: child })] }));\n};\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { AssetAmount } from '@tonkeeper/core/dist/entries/crypto/asset/asset-amount';\nimport { TON_ASSET } from '@tonkeeper/core/dist/entries/crypto/asset/constants';\nimport { intlLocale } from '@tonkeeper/core/dist/entries/language';\nimport BigNumber from 'bignumber.js';\nimport { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useAreNftActionsDisabled } from '../../hooks/blockchain/nft/useAreNftActionsDisabled';\nimport { useEstimateNftRenew } from '../../hooks/blockchain/nft/useEstimateNftRenew';\nimport { useRenewNft } from '../../hooks/blockchain/nft/useRenewNft';\nimport { useTonRecipient } from '../../hooks/blockchain/useTonRecipient';\nimport { toDaysLeft, useDateFormat } from '../../hooks/dateFormat';\nimport { useTranslation } from '../../hooks/translation';\nimport { useQueryChangeWait } from '../../hooks/useQueryChangeWait';\nimport { useNftDNSExpirationDate } from '../../state/nft';\nimport { Notification } from '../Notification';\nimport { Body2 } from '../Text';\nimport { Button } from '../fields/Button';\nimport { ConfirmView, ConfirmViewButtons, ConfirmViewButtonsSlot } from '../transfer/ConfirmView';\nimport { ConfirmAndCancelMainButton } from '../transfer/common';\nimport { useNotifyErrorHandle, useToast } from '../../hooks/useNotification';\nconst RenewDNSBlock = styled.div `\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\nconst RenewDNSButton = styled(Button) `\n    margin-bottom: 0.75rem;\n`;\nconst RenewDNSValidUntil = styled(Body2) `\n    color: ${props => (props.danger ? props.theme.accentRed : props.theme.textSecondary)};\n`;\nconst dnsRenewAssetAmount = AssetAmount.fromRelativeAmount({\n    asset: TON_ASSET,\n    amount: new BigNumber(0.02)\n});\nconst YEAR_MS = 1000 * 60 * 60 * 24 * 366;\nconst intlOptions = { year: 'numeric', hour: undefined, minute: undefined };\nexport const RenewNft = ({ nft }) => {\n    const toast = useToast();\n    const isDisabled = useAreNftActionsDisabled(nft);\n    const notifyError = useNotifyErrorHandle();\n    const { t, i18n: { language } } = useTranslation();\n    const rtf = new Intl.RelativeTimeFormat(intlLocale(language), { style: 'long' });\n    const query = useNftDNSExpirationDate(nft);\n    const { data: expirationDate, isLoading: isExpirationInfoLoading } = query;\n    const { refetch: refetchExpirationInfo, isLoading: isWaitingForUpdate, isCompleted } = useQueryChangeWait(query, (current, prev) => {\n        return !!current?.getTime() && current.getTime() !== prev?.getTime();\n    });\n    useEffect(() => {\n        if (isCompleted) {\n            toast(t('renew_nft_renewed'));\n        }\n    }, [isCompleted]);\n    const renewUntilFormatted = useDateFormat(Date.now() + YEAR_MS, intlOptions);\n    const [isOpen, setIsOpen] = useState(false);\n    const onClose = (confirmed) => {\n        setIsOpen(false);\n        if (confirmed) {\n            refetchExpirationInfo();\n        }\n    };\n    const { recipient, isLoading: isRecipientLoading } = useTonRecipient(nft.address);\n    const estimation = useEstimateNftRenew({\n        nftAddress: nft.address\n    });\n    const mutation = useRenewNft({\n        nftAddress: nft.address\n    });\n    const onOpen = () => {\n        if (estimation.error) {\n            notifyError(estimation.error);\n            return;\n        }\n        setIsOpen(true);\n    };\n    if (!isExpirationInfoLoading && !expirationDate) {\n        return null;\n    }\n    const child = () => (_jsx(ConfirmView, { onClose: onClose, recipient: recipient, assetAmount: dnsRenewAssetAmount, fitContent: true, estimation: estimation, ...mutation, children: _jsx(ConfirmViewButtonsSlot, { children: _jsx(ConfirmViewButtons, { MainButton: ConfirmAndCancelMainButton }) }) }));\n    const daysLeft = toDaysLeft(expirationDate);\n    return (_jsxs(_Fragment, { children: [_jsxs(RenewDNSBlock, { children: [_jsx(RenewDNSButton, { type: \"button\", disabled: isDisabled || isWaitingForUpdate, loading: isExpirationInfoLoading || estimation.isFetching || isRecipientLoading, onClick: onOpen, size: \"large\", secondary: true, fullWidth: true, children: isWaitingForUpdate\n                            ? t('renew_nft_in_progress')\n                            : t('dns_renew_until_btn').replace('%{untilDate}', renewUntilFormatted) }), daysLeft !== '' && (_jsx(RenewDNSValidUntil, { danger: Number(daysLeft) <= 30, children: t('renew_nft_expiration_date').replace('%1%', rtf.format(Number(daysLeft), 'days')) }))] }), _jsx(Notification, { isOpen: isOpen, hideButton: true, handleClose: () => onClose, backShadow: true, children: child })] }));\n};\n","import { useTonRawTransactionService } from '../useBlockchainService';\nimport { useActiveAccount } from '../../../state/wallet';\nimport { useQuery } from '@tanstack/react-query';\nimport { NFTEncoder } from '@tonkeeper/core/dist/service/ton-blockchain/encoder/nft-encoder';\nimport { EXTERNAL_SENDER_CHOICE, useGetEstimationSender } from '../useSender';\nimport { useToQueryKeyPart } from '../../useToQueryKeyPart';\nexport const useEstimateNftRenew = (args) => {\n    const getSender = useGetEstimationSender(EXTERNAL_SENDER_CHOICE);\n    const getSenderKey = useToQueryKeyPart(getSender);\n    const rawTransactionService = useTonRawTransactionService();\n    const activeAccount = useActiveAccount();\n    const walletAddress = activeAccount.activeTonWallet.rawAddress;\n    return useQuery(['estimate-nft-renew', args.nftAddress, rawTransactionService, getSenderKey, walletAddress], async () => {\n        const nftEncoder = new NFTEncoder(walletAddress);\n        return rawTransactionService.estimate(await getSender(), nftEncoder.encodeNftRenew(args));\n    }, {\n        enabled: !!getSender\n    });\n};\n","import { EXTERNAL_SENDER_CHOICE, useGetSender } from '../useSender';\nimport { useTonRawTransactionService } from '../useBlockchainService';\nimport { useActiveAccount } from '../../../state/wallet';\nimport { useTransactionAnalytics } from '../../amplitude';\nimport { useMutation } from '@tanstack/react-query';\nimport { NFTEncoder } from '@tonkeeper/core/dist/service/ton-blockchain/encoder/nft-encoder';\nimport { zeroFee } from '@tonkeeper/core/dist/service/ton-blockchain/utils';\nexport const useRenewNft = (args) => {\n    const getSender = useGetSender();\n    const rawTransactionService = useTonRawTransactionService();\n    const activeAccount = useActiveAccount();\n    const track2 = useTransactionAnalytics();\n    const walletAddress = activeAccount.activeTonWallet.rawAddress;\n    return useMutation(async () => {\n        const nftEncoder = new NFTEncoder(walletAddress);\n        await rawTransactionService.send(await getSender(EXTERNAL_SENDER_CHOICE), zeroFee, nftEncoder.encodeNftRenew(args));\n        track2('renew-dns');\n        return true;\n    });\n};\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Address } from '@ton/core';\nimport { isNFTDNS } from '@tonkeeper/core/dist/entries/nft';\nimport styled from 'styled-components';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { useTranslation } from '../../hooks/translation';\nimport { useActiveWallet, useIsActiveWalletWatchOnly } from '../../state/wallet';\nimport { Body2 } from '../Text';\nimport { Button } from '../fields/Button';\nimport { LinkNft } from './LinkNft';\nimport { RenewNft } from './RenewNft';\nconst getMarketplaceUrl = (nftItem) => {\n    const { marketplace } = nftItem.metadata;\n    const address = Address.parse(nftItem.address).toString();\n    switch (marketplace) {\n        case 'getgems.io':\n            return `https://getgems.io/nft/${address}`;\n        // TODO: add more\n        default:\n            return `https://getgems.io/nft/${address}`;\n    }\n};\nconst ViewOnMarketButton = ({ url }) => {\n    const { t } = useTranslation();\n    const sdk = useAppSdk();\n    return (_jsx(Button, { size: \"large\", secondary: true, fullWidth: true, onClick: e => {\n            e.preventDefault();\n            e.stopPropagation();\n            sdk.openPage(url);\n        }, children: t('nft_open_in_marketplace') }));\n};\nconst ActionTransfer = ({ nftItem }) => {\n    const sdk = useAppSdk();\n    const { t } = useTranslation();\n    const wallet = useActiveWallet();\n    return (_jsxs(_Fragment, { children: [_jsx(Button, { primary: true, size: \"large\", fullWidth: true, disabled: nftItem.sale !== undefined || nftItem.owner?.address !== wallet.rawAddress, onClick: e => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    sdk.uiEvents.emit('transferNft', { method: 'transferNft', params: nftItem });\n                }, children: t('nft_transfer_nft') }), nftItem.sale && _jsx(DNSSaleText, { children: t('nft_on_sale_text') })] }));\n};\nconst SaleText = styled(Body2) `\n    width: 100%;\n    color: ${props => props.theme.textSecondary};\n`;\nconst DNSSaleText = styled(SaleText) `\n    width: 100%;\n    padding: 0 1rem;\n    text-align: left;\n`;\nexport const NftAction = ({ kind, nftItem }) => {\n    const isReadOnly = useIsActiveWalletWatchOnly();\n    if (isReadOnly) {\n        return (_jsx(_Fragment, { children: _jsx(ViewOnMarketButton, { url: getMarketplaceUrl(nftItem) }) }));\n    }\n    switch (kind) {\n        case 'token': {\n            return (_jsxs(_Fragment, { children: [_jsx(ActionTransfer, { nftItem: nftItem }), _jsx(ViewOnMarketButton, { url: getMarketplaceUrl(nftItem) })] }));\n        }\n        case 'ton.dns': {\n            return (_jsxs(_Fragment, { children: [_jsx(ActionTransfer, { nftItem: nftItem }), _jsx(ViewOnMarketButton, { url: `https://dns.ton.org/#${nftItem.dns?.slice(0, -4)}` }), isNFTDNS(nftItem) && (_jsxs(_Fragment, { children: [_jsx(LinkNft, { nft: nftItem }), _jsx(RenewNft, { nft: nftItem })] }))] }));\n        }\n        case 'telegram.number': {\n            const numbers = nftItem.metadata.name.replace(/\\s/g, '').slice(1);\n            return (_jsxs(_Fragment, { children: [_jsx(ActionTransfer, { nftItem: nftItem }), _jsx(ViewOnMarketButton, { url: `https://fragment.com/number/${numbers}` })] }));\n        }\n        case 'telegram.name': {\n            return (_jsxs(_Fragment, { children: [_jsx(ActionTransfer, { nftItem: nftItem }), _jsx(ViewOnMarketButton, { url: `https://fragment.com/username/${nftItem.dns?.slice(0, -5)}` }), isNFTDNS(nftItem) && _jsx(LinkNft, { nft: nftItem })] }));\n        }\n    }\n};\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Address } from '@ton/core';\nimport { formatAddress, toShortValue } from '@tonkeeper/core/dist/utils/common';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { useDateFormat } from '../../hooks/dateFormat';\nimport { useTranslation } from '../../hooks/translation';\nimport { useActiveConfig, useActiveTonNetwork } from '../../state/wallet';\nimport { SpinnerIcon } from '../Icon';\nimport { ListBlock, ListItem, ListItemPayload } from '../List';\nimport { Body1, H3, Label1 } from '../Text';\nimport { useNftDNSExpirationDate, useNftItemData } from '../../state/nft';\nconst Block = styled.div `\n    width: 100%;\n`;\nconst Row = styled.div `\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 0.625rem;\n`;\nconst Link = styled(Label1) `\n    cursor: pointer;\n    color: ${props => props.theme.textAccent};\n`;\nconst RightText = styled(Body1) `\n    color: ${props => props.theme.textSecondary};\n`;\nexport const NftDetails = React.memo(({ nftItem }) => {\n    const { t } = useTranslation();\n    const { data } = useNftItemData(nftItem.address);\n    const { data: expirationDate, isLoading: isExpirationDateLoading } = useNftDNSExpirationDate(nftItem);\n    const expirationDateFormatted = useDateFormat(expirationDate, {\n        year: 'numeric',\n        hour: undefined,\n        minute: undefined\n    });\n    const item = data ?? nftItem;\n    const sdk = useAppSdk();\n    const config = useActiveConfig();\n    const owner = item.owner?.address;\n    const address = Address.parse(item.address).toString();\n    const network = useActiveTonNetwork();\n    const url = config.NFTOnExplorerUrl ?? 'https://tonviewer.com/nft/%s';\n    const nftAddress = formatAddress(address, network, true);\n    return (_jsxs(Block, { children: [_jsxs(Row, { children: [_jsx(H3, { children: t('nft_details') }), _jsx(Link, { onClick: () => sdk.openPage(url.replace('%s', address)), children: t('nft_view_in_explorer') })] }), _jsxs(ListBlock, { margin: false, children: [owner && (_jsx(ListItem, { onClick: () => sdk.copyToClipboard(formatAddress(owner, network)), children: _jsxs(ListItemPayload, { children: [_jsx(RightText, { children: t('nft_owner_address') }), _jsx(Label1, { children: toShortValue(formatAddress(owner, network)) })] }) })), !!(expirationDate || isExpirationDateLoading) && (_jsx(ListItem, { hover: false, children: _jsxs(ListItemPayload, { children: [_jsx(RightText, { children: t('dns_expiration_date') }), expirationDate ? (_jsx(Label1, { children: expirationDateFormatted })) : (_jsx(SpinnerIcon, {}))] }) })), _jsx(ListItem, { onClick: () => sdk.copyToClipboard(nftAddress), children: _jsxs(ListItemPayload, { children: [_jsx(RightText, { children: t('nft_contract_address') }), _jsx(Label1, { children: toShortValue(nftAddress) })] }) })] })] }));\n});\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { TrustType } from '@tonkeeper/core/dist/tonApiV2';\nimport { useMemo, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { useTranslation } from '../../hooks/translation';\nimport { useDisclosure } from '../../hooks/useDisclosure';\nimport { useHideNft, useMarkNftAsSpam, useMarkNftAsTrusted, useNftCollectionData } from '../../state/nft';\nimport { useActiveConfig, useActiveTonWalletConfig } from '../../state/wallet';\nimport { DropDown } from '../DropDown';\nimport { BlockIcon, ChevronDownIcon, EllipsisIcon, EyeDisableIcon, GlobeIcon, InfoCircleIcon, VerificationIcon } from '../Icon';\nimport { ListBlock, ListItemElement, ListItemPayload } from '../List';\nimport { NotificationBlock, NotificationTitleBlock } from '../Notification';\nimport { Body2, H2, H3, Label1, Label4 } from '../Text';\nimport { Button } from '../fields/Button';\nimport { RoundedButton } from '../fields/RoundedButton';\nimport { Body, CroppedBodyText } from '../jettons/CroppedText';\nimport { NftAction } from './NftAction';\nimport { NftDetails } from './NftDetails';\nimport { Image, NftBlock } from './Nfts';\nimport { UnverifiedNftNotification } from './UnverifiedNftNotification';\nconst Text = styled.div `\n    display: flex;\n    flex-direction: column;\n    padding: 0.875rem 1rem;\n`;\nconst Delimiter = styled.div `\n    border-top: 1px solid ${props => props.theme.separatorCommon};\n`;\nconst CollectionTitle = styled(Label1) `\n    margin-bottom: 0.5rem;\n`;\nconst Icon = styled.span `\n    position: relative;\n    top: 3px;\n    margin-left: 4px;\n`;\nexport const TonDnsRootCollectionAddress = '0:b774d95eb20543f186c06b371ab88ad704f7e256130caf96189368a7d0cb6ccf';\nexport const TelegramUsernamesCollectionAddress = '0:80d78a35f955a14b679faa887ff4cd5bfc0f43b4a4eea2a7e6927f3701b273c2';\nexport const TelegramNumbersCollectionAddress = '0:0e41dc1dc3c9067ed24248580e12b3359818d83dee0304fabcf80845eafafdb2';\nexport const GetGemsDnsCollectionAddress = '0:e1955aba7249f23e4fd2086654a176516d98b134e0df701302677c037c358b17';\nexport const KnownNFTDnsCollections = [\n    TonDnsRootCollectionAddress,\n    TelegramNumbersCollectionAddress,\n    TelegramUsernamesCollectionAddress,\n    GetGemsDnsCollectionAddress\n];\nconst Title = styled(H2) `\n    word-break: break-word;\n\n    user-select: none;\n`;\nconst SaleBlock = styled(Label4) `\n    color: ${props => props.theme.textSecondary};\n    border: 1px solid ${props => props.theme.buttonTertiaryBackground};\n    border-radius: 6px;\n    padding: 3.5px 6px 4.5px;\n    text-transform: uppercase;\n\n    position: relative;\n    top: -3px;\n\n    white-space: nowrap;\n`;\nconst UnverifiedLabel = styled(Body2) `\n    color: ${props => (props.isTrusted ? props.theme.textSecondary : props.theme.accentOrange)};\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n`;\nconst NftNameContainer = styled.div `\n    text-align: center;\n`;\nconst ButtonsBlock = styled.div `\n    display: flex;\n    gap: 8px;\n    width: 100%;\n\n    > * {\n        flex: 1;\n    }\n`;\nconst DropDownWrapper = styled.div `\n    .drop-down-container {\n        z-index: 100;\n        top: calc(100% + 12px);\n        right: 0;\n    }\n`;\nconst ListBlockStyled = styled(ListBlock) `\n    margin: 0;\n\n    svg {\n        color: ${p => p.theme.accentBlue};\n    }\n`;\nexport const NftPreview = ({ onClose, nftItem }) => {\n    const { mutateAsync: markNftAsSpam, isLoading: markNftAsSpamLoading } = useMarkNftAsSpam();\n    const { mutate: markNftAsTrusted, isLoading: markNftAsTrustedLoading } = useMarkNftAsTrusted();\n    const { mutateAsync: hideNft } = useHideNft();\n    const { data } = useActiveTonWalletConfig();\n    const isSuspicious = nftItem.trust !== TrustType.Whitelist;\n    const isTrusted = !!data?.trustedNfts.includes(nftItem.collection?.address || nftItem.address);\n    const ref = useRef(null);\n    const { t } = useTranslation();\n    const { data: collection } = useNftCollectionData(nftItem);\n    const { description } = nftItem.metadata;\n    const name = nftItem.dns ?? nftItem.metadata.name;\n    const itemKind = useMemo(() => {\n        switch (nftItem.collection?.address) {\n            case TonDnsRootCollectionAddress:\n                return 'ton.dns';\n            case TelegramUsernamesCollectionAddress:\n                return 'telegram.name';\n            case TelegramNumbersCollectionAddress:\n                return 'telegram.number';\n            default:\n                return 'token';\n        }\n    }, [nftItem]);\n    const collectionName = nftItem?.collection?.name;\n    const image = nftItem.previews?.find(item => item.resolution === '1500x1500');\n    const { isOpen: isSpamModalOpen, onClose: onCloseSpamModal, onOpen: onOpenSpamModal } = useDisclosure();\n    const handleCloseSpamModal = (action) => {\n        if (action === 'mark_spam') {\n            markNftAsSpam(nftItem).then(onClose);\n        }\n        else if (action === 'mark_trusted') {\n            markNftAsTrusted(nftItem);\n        }\n        onCloseSpamModal();\n    };\n    const config = useActiveConfig();\n    const sdk = useAppSdk();\n    const explorerUrl = config.NFTOnExplorerUrl ?? 'https://tonviewer.com/nft/%s';\n    return (_jsxs(NotificationBlock, { children: [onClose && (_jsxs(NotificationTitleBlock, { children: [_jsx(RoundedButton, { onClick: onClose, children: _jsx(ChevronDownIcon, {}) }), _jsxs(NftNameContainer, { children: [_jsx(H3, { children: nftItem.dns ?? nftItem.metadata.name }), isSuspicious && (_jsxs(UnverifiedLabel, { isTrusted: isTrusted, onClick: onOpenSpamModal, children: [t('suspicious_label_full'), \"\\u00A0\", _jsx(InfoCircleIcon, { color: isTrusted ? 'textSecondary' : 'accentOrange' })] }))] }), _jsx(UnverifiedNftNotification, { isOpen: isSpamModalOpen, onClose: handleCloseSpamModal, isTrusted: isTrusted }), _jsx(DropDownWrapper, { children: _jsx(DropDown, { containerClassName: \"drop-down-container\", payload: closeDropDown => (_jsxs(ListBlockStyled, { children: [_jsx(ListItemElement, { onClick: () => {\n                                            closeDropDown();\n                                            hideNft(nftItem).then(onClose);\n                                        }, children: _jsxs(ListItemPayload, { children: [_jsx(Label1, { children: t('nft_actions_hide_nft') }), _jsx(EyeDisableIcon, {})] }) }), _jsx(ListItemElement, { onClick: () => {\n                                            closeDropDown();\n                                            markNftAsSpam(nftItem).then(onClose);\n                                        }, children: _jsxs(ListItemPayload, { children: [_jsx(Label1, { children: t('nft_actions_hide_and_report') }), _jsx(BlockIcon, {})] }) }), _jsx(ListItemElement, { onClick: () => sdk.openPage(explorerUrl.replace('%s', nftItem.address)), children: _jsxs(ListItemPayload, { children: [_jsx(Label1, { children: t('nft_actions_view_on_explorer') }), _jsx(GlobeIcon, {})] }) })] })), children: _jsx(RoundedButton, { children: _jsx(EllipsisIcon, {}) }) }) })] })), isSuspicious && !isTrusted && (_jsxs(ButtonsBlock, { children: [_jsx(Button, { warn: true, type: \"button\", onClick: () => markNftAsSpam(nftItem).then(onClose), loading: markNftAsSpamLoading, children: t('suspicious_buttons_report') }), _jsx(Button, { type: \"button\", onClick: () => markNftAsTrusted(nftItem), loading: markNftAsTrustedLoading, children: t('suspicious_buttons_not_spam') })] })), _jsxs(NftBlock, { children: [image && _jsx(Image, { ref: ref, url: image.url }), _jsxs(Text, { children: [_jsxs(Title, { children: [name, nftItem.sale && (_jsxs(_Fragment, { children: ['  ', _jsx(SaleBlock, { children: t('nft_on_sale') })] }))] }), collectionName && (_jsxs(Body, { open: true, margin: \"small\", children: [collectionName, nftItem.approvedBy && nftItem.approvedBy.length > 0 && (_jsx(Icon, { children: _jsx(VerificationIcon, {}) }))] })), description && (_jsx(CroppedBodyText, { text: description, margin: \"last\", contentColor: true }))] }), collection && collection.metadata?.description && (_jsxs(_Fragment, { children: [_jsx(Delimiter, {}), _jsxs(Text, { children: [_jsx(CollectionTitle, { children: t('nft_about_collection') }), _jsx(CroppedBodyText, { text: collection.metadata.description, margin: \"last\", contentColor: true })] })] }))] }), _jsx(NftAction, { nftItem: nftItem, kind: itemKind }), _jsx(NftDetails, { nftItem: nftItem, kind: itemKind })] }));\n};\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { Notification } from '../Notification';\nimport { NftPreview } from './NftView';\nconst NftNotification = () => {\n    const sdk = useAppSdk();\n    const [nftItem, setNft] = useState(undefined);\n    const handleClose = useCallback(() => {\n        setNft(undefined);\n    }, [setNft]);\n    useEffect(() => {\n        const handler = (options) => {\n            setNft(options.params);\n        };\n        sdk.uiEvents.on('nft', handler);\n        return () => {\n            sdk.uiEvents.off('nft', handler);\n        };\n    }, [sdk, setNft]);\n    const Content = useCallback(() => {\n        if (!nftItem)\n            return undefined;\n        return _jsx(NftPreview, { onClose: handleClose, nftItem: nftItem });\n    }, [nftItem, handleClose]);\n    return (_jsx(Notification, { isOpen: nftItem !== undefined, hideButton: true, handleClose: handleClose, backShadow: true, children: Content }));\n};\nexport default NftNotification;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport React, { useContext, useLayoutEffect, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { AppSelectionContext, useAppContext } from '../../hooks/appContext';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { toDaysLeft } from '../../hooks/dateFormat';\nimport { FireBadgeIcon, SaleIcon } from '../Icon';\nimport { NftCollectionBody3, NftHeaderLabel2 } from './NftHeader';\nimport { useNftDNSExpirationDate } from \"../../state/nft\";\nconst Grid = styled.div `\n    display: grid;\n    margin: 0 0 2rem 0;\n    gap: 0.5rem;\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n`;\nexport const NftBlock = styled.div `\n    position: relative;\n    user-select: none;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n\n    background-color: ${props => props.theme.backgroundContent};\n    transition: background-color 0.1s ease;\n\n    border-radius: ${props => props.theme.cornerSmall};\n\n    overflow: hidden;\n\n    ${props => {\n    if (props.ios) {\n        if (props.isHover) {\n            return css `\n                    background-color: ${props.theme.backgroundContentTint};\n                `;\n        }\n    }\n    else {\n        if (!props.hover) {\n            return undefined;\n        }\n        else {\n            return css `\n                    cursor: pointer;\n\n                    &:hover {\n                        background-color: ${props.theme.backgroundContentTint};\n                    }\n                `;\n        }\n    }\n}}\n`;\nconst ImageContainer = styled.div `\n    width: 100%;\n    position: relative;\n`;\nexport const Image = styled.div `\n    width: 100%;\n    padding-bottom: 100%;\n\n    ${props => props.url &&\n    css `\n            background-image: url('${props.url}');\n        `}\n    background-size: cover;\n`;\nconst Text = styled.div `\n    display: flex;\n    flex-direction: column;\n    padding: 0.5rem 0.75rem 0.5rem;\n    white-space: nowrap;\n`;\nconst SaleBlock = styled.div `\n    position: absolute;\n    top: 10px;\n    right: 8px;\n`;\nconst ExpiringBlock = styled.div `\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    height: 32px;\n    width: 32px;\n`;\nexport const NftItemView = React.memo(({ nft, resolution, onOpen }) => {\n    const isSale = nft.sale !== undefined;\n    const image = nft.previews?.find(item => item.resolution === resolution);\n    const { ios } = useAppContext();\n    const [isHover, setHover] = useState(false);\n    const ref = useRef(null);\n    const selection = useContext(AppSelectionContext);\n    const { data: expirationDate } = useNftDNSExpirationDate(nft);\n    useLayoutEffect(() => {\n        if (ref.current && selection && ref.current.contains(selection)) {\n            setHover(true);\n        }\n        else {\n            setHover(false);\n        }\n    }, [ref.current, selection, setHover]);\n    const isExpiring = expirationDate && Number(toDaysLeft(expirationDate)) <= 30;\n    return (_jsxs(NftBlock, { hover: true, isHover: isHover, ios: ios, ref: ref, onClick: () => onOpen(nft), children: [_jsxs(ImageContainer, { children: [_jsx(Image, { url: image?.url }), isSale && (_jsx(SaleBlock, { children: _jsx(SaleIcon, {}) })), isExpiring && (_jsx(ExpiringBlock, { children: _jsx(FireBadgeIcon, {}) }))] }), _jsxs(Text, { children: [_jsx(NftHeaderLabel2, { nft: nft }), _jsx(NftCollectionBody3, { nft: nft })] })] }));\n});\nexport const NftsList = ({ nfts, className }) => {\n    const sdk = useAppSdk();\n    return (_jsx(Grid, { className: className, children: (nfts ?? []).map(item => {\n            if (item.metadata?.render_type === 'hidden') {\n                return _jsx(_Fragment, {});\n            }\n            return (_jsx(NftItemView, { nft: item, resolution: \"500x500\", onOpen: () => sdk.openNft(item) }, item.address));\n        }) }));\n};\n","import { BLOCKCHAIN_NAME } from '@tonkeeper/core/dist/entries/crypto';\nimport { formatAddress } from '@tonkeeper/core/dist/utils/common';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { useGetToAccount } from '../../components/transfer/RecipientView';\nimport { useActiveTonNetwork } from '../../state/wallet';\nexport function useTonRecipient(address) {\n    const network = useActiveTonNetwork();\n    const isFirstRender = useRef(true);\n    const { isLoading, data: toAccount, mutate: mutateRecipient } = useGetToAccount();\n    useEffect(() => {\n        isFirstRender.current = false;\n        mutateRecipient({ address });\n    }, [address]);\n    const recipient = useMemo(() => ({\n        address: {\n            address: formatAddress(address, network, true),\n            blockchain: BLOCKCHAIN_NAME.TON\n        },\n        comment: '',\n        done: false,\n        toAccount: toAccount\n    }), [toAccount, network]);\n    return {\n        recipient,\n        isLoading: isFirstRender.current ? true : isLoading\n    };\n}\n","import { intlLocale } from '@tonkeeper/core/dist/entries/language';\nimport { useMemo } from 'react';\nimport { useTranslation } from './translation';\nexport function useDateFormat(date, options) {\n    const { i18n } = useTranslation();\n    return useMemo(() => {\n        if (!date) {\n            return '';\n        }\n        return new Intl.DateTimeFormat(intlLocale(i18n.language), {\n            month: 'short',\n            day: 'numeric',\n            year: new Date().getFullYear() - 1 === new Date(date).getFullYear()\n                ? 'numeric'\n                : undefined,\n            hour: 'numeric',\n            minute: 'numeric',\n            ...options\n        }).format(date);\n    }, [date, i18n.language, options]);\n}\nexport function toDaysLeft(date) {\n    if (!date) {\n        return '';\n    }\n    const days = Math.floor((new Date(date).getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n    if (days < 0) {\n        return '0';\n    }\n    return days.toString();\n}\n"],"names":["isNFTDNS","nft","dns","useAreNftActionsDisabled","_nft$owner","wallet","useActiveWallet","undefined","sale","seeIfAddressEqual","rawAddress","owner","address","useEstimateNftLink","args","getSender","useGetEstimationSender","EXTERNAL_SENDER_CHOICE","getSenderKey","useToQueryKeyPart","rawTransactionService","useTonRawTransactionService","walletAddress","useActiveAccount","activeTonWallet","useQuery","nftAddress","linkToAddress","async","nftEncoder","NFTEncoder","estimate","encodeNftLink","enabled","useLinkNft","useGetSender","activeAccount","track2","useTransactionAnalytics","useMutation","send","zeroFee","useQueryChangeWait","query","shouldExit","isLoading","setIsLoading","useState","isCompleted","setIsCompleted","dispose","setDispose","prev","useRef","data","waitRecursive","result","refetch","current","setTimeout","useEffect","timeLimit","arguments","length","LinkNft","_ref","_data$wallet","toast","useToast","t","useTranslation","useNftDNSLinkData","linkedAddress","isWaitingForUpdate","_prev$wallet","_current$wallet","_jsx","LinkNftLinked","LinkNftUnlinked","ReplaceButton","styled","Body2","_templateObject","_taggedTemplateLiteral","props","isDisabled","theme","textSecondary","textAccent","dnsLinkAmount","BigNumber","dnsLinkAssetAmount","AssetAmount","fromRelativeAmount","asset","TON_ASSET","amount","_ref2","notifyError","useNotifyErrorHandle","openedView","setOpenedView","walletState","setLinkToAddress","onClose","confirm","recipient","isRecipientLoading","useTonRecipient","refetchEstimateFee","estimation","onSaveLinkToAddress","useCallback","mutation","isSelectedCurrentAddress","areEqAddresses","network","useActiveTonNetwork","chooseWalletChild","LinkNFTWalletView","onSave","isFetching","domain","isTME","isTMEDomain","_jsxs","_Fragment","children","Button","type","size","secondary","fullWidth","disabled","loading","onClick","onOpen","error","Notification","title","isOpen","hideButton","handleClose","backShadow","confirmChild","ConfirmView","assetAmount","fitContent","ConfirmViewTitleSlot","ConfirmViewHeadingSlot","ConfirmViewDetailsSlot","ListItem","hover","ListItemPayload","Label","ColumnText","right","text","toShortValue","formatAddress","ConfirmViewDetailsAmount","ConfirmViewDetailsFee","ConfirmViewButtonsSlot","ConfirmViewButtons","MainButton","ConfirmAndCancelMainButton","WalletLabelStyled","Body1","_templateObject2","ChangeWalletContainerStyled","NotificationBlock","_templateObject3","_ref3","inputValue","setInputValue","wasSubmitted","setWasSubmitted","isInputValid","useMemo","Address","parse","onSubmit","e","stopPropagation","preventDefault","toRawString","err","console","replace","Input","id","isValid","value","onChange","label","clearButton","Gap","primary","WarnTextStyled","_templateObject4","accentOrange","_ref4","setIsOpen","isLinkedWithAnotherWallet","Object","values","isStandardTonWallet","getWalletsAddresses","publicKey","every","_ref5","child","RenewDNSBlock","div","RenewDNSButton","RenewDNSValidUntil","danger","accentRed","dnsRenewAssetAmount","intlOptions","year","hour","minute","RenewNft","i18n","language","rtf","Intl","RelativeTimeFormat","intlLocale","style","useNftDNSExpirationDate","expirationDate","isExpirationInfoLoading","refetchExpirationInfo","getTime","renewUntilFormatted","useDateFormat","Date","now","confirmed","encodeNftRenew","useEstimateNftRenew","useRenewNft","daysLeft","toDaysLeft","Number","format","getMarketplaceUrl","nftItem","marketplace","metadata","toString","concat","ViewOnMarketButton","url","sdk","useAppSdk","openPage","ActionTransfer","_nftItem$owner","uiEvents","emit","method","params","DNSSaleText","SaleText","NftAction","kind","useIsActiveWalletWatchOnly","_nftItem$dns","slice","numbers","name","_nftItem$dns2","Block","Row","Link","Label1","RightText","NftDetails","React","_item$owner","_config$NFTOnExplorer","useNftItemData","isExpirationDateLoading","expirationDateFormatted","item","config","useActiveConfig","NFTOnExplorerUrl","H3","ListBlock","margin","copyToClipboard","SpinnerIcon","Text","Delimiter","separatorCommon","CollectionTitle","Icon","span","TonDnsRootCollectionAddress","TelegramUsernamesCollectionAddress","TelegramNumbersCollectionAddress","Title","H2","_templateObject5","SaleBlock","Label4","_templateObject6","buttonTertiaryBackground","UnverifiedLabel","_templateObject7","isTrusted","NftNameContainer","_templateObject8","ButtonsBlock","_templateObject9","DropDownWrapper","_templateObject10","ListBlockStyled","_templateObject11","p","accentBlue","NftPreview","_nftItem$collection","_nftItem$collection3","_nftItem$previews","_collection$metadata","mutateAsync","markNftAsSpam","markNftAsSpamLoading","useMarkNftAsSpam","mutate","markNftAsTrusted","markNftAsTrustedLoading","useMarkNftAsTrusted","hideNft","useHideNft","useActiveTonWalletConfig","isSuspicious","trust","TrustType","Whitelist","trustedNfts","includes","collection","ref","useNftCollectionData","description","itemKind","_nftItem$collection2","collectionName","image","previews","find","resolution","isSpamModalOpen","onCloseSpamModal","onOpenSpamModal","useDisclosure","explorerUrl","NotificationTitleBlock","RoundedButton","ChevronDownIcon","InfoCircleIcon","color","UnverifiedNftNotification","action","then","DropDown","containerClassName","payload","closeDropDown","ListItemElement","EyeDisableIcon","BlockIcon","GlobeIcon","EllipsisIcon","warn","NftBlock","Image","Body","open","approvedBy","VerificationIcon","CroppedBodyText","contentColor","NftNotification","setNft","handler","options","on","off","Content","Grid","backgroundContent","cornerSmall","ios","isHover","css","backgroundContentTint","ImageContainer","ExpiringBlock","NftItemView","_nft$previews","isSale","useAppContext","setHover","selection","useContext","AppSelectionContext","useLayoutEffect","contains","isExpiring","SaleIcon","FireBadgeIcon","NftHeaderLabel2","NftCollectionBody3","NftsList","nfts","className","map","_item$metadata","render_type","openNft","isFirstRender","toAccount","mutateRecipient","useGetToAccount","blockchain","BLOCKCHAIN_NAME","TON","comment","done","date","DateTimeFormat","month","day","getFullYear","days","Math","floor"],"sourceRoot":""}