# service/facebook_registration_worker.py
import argparse
import json
import logging
import sys
import time, random
import uiautomator2 as u2 
from concurrent.futures import ThreadPoolExecutor
from service.facebook_funtion_manager import XuLyBuoc1
from service.table_status_manager import TableStatusManager
from service.moi_data_manager import MailTheoTepHandler, SDTTheoTepHandler, MailDuoiMailHandler, SDTDauSoHandler
from service.facebook_funtion_manager import XuLyBuoc1, get_password_configuration
from utils.u2_device_manager import U2DeviceManager
from utils.global_u2_pool import global_u2_pool
from typing import Dict, Any

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class FacebookRegistrationWorker:
    def __init__(self, max_workers: int = 4):
        self.max_workers = max_workers
        self.executor = None
        self.device_ids = []
        self.status_manager = TableStatusManager()
        self.u2_manager = global_u2_pool.get_manager()
        self.moi_config = None
        logger.info(f"Initializing FacebookRegistrationWorker with {max_workers} workers")
    
    def initialize_worker_pool(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """T·∫°o worker pool v·ªõi s·ªë workers = s·ªë devices"""
        try:
            logger.info("Creating unlimited worker pool...")
            # **TH√äM DEBUG LOG**
            logger.info(f"üîç DEBUG - Received config: {config}")
            
            # L·∫•y c·∫•u h√¨nh
            original_device_ids = config.get('selected_devices', [])
            logger.info(f"üîç DEBUG - original_device_ids from config: {original_device_ids}")

            self.table_manager = config.get('table_manager')
            so_ld = config.get('so_ld', 1)
            self.moi_config = config.get('moi_config')
            
            # **KI·ªÇM TRA DEVICES TH·ª∞C T·∫æ QUA ADB**
            logger.info("Checking real ADB devices...")
            try:
                import subprocess
                result = subprocess.run(['adb', 'devices'], capture_output=True, text=True, timeout=10)
                adb_devices = []
                for line in result.stdout.strip().split('\n')[1:]:
                    if line.strip() and '\t' in line:
                        device_id, status = line.strip().split('\t')
                        if status == 'device':
                            adb_devices.append(device_id)
                logger.info(f"üì± ADB devices online: {adb_devices}")
            except Exception as e:
                logger.error(f"‚ùå Error checking ADB devices: {e}")
                return {'success': False, 'error': f'ADB check failed: {str(e)}'}
            
            # **VALIDATION DEVICES**
            if not original_device_ids or len(original_device_ids) == 0:
                logger.error("‚ùå No devices selected from GUI")
                return {'success': False, 'error': 'No devices selected', 'message': 'Vui l√≤ng ch·ªçn devices t·ª´ tab QU·∫¢N L√ù LD/PHONE tr∆∞·ªõc khi Start'}
            
            # L·ªçc ch·ªâ nh·ªØng devices th·ª±c s·ª± online
            valid_devices = [device_id for device_id in original_device_ids if device_id in adb_devices]
            
            if not valid_devices:
                logger.error(f"‚ùå No valid devices found. Selected: {original_device_ids}, Online: {adb_devices}")
                return {'success': False, 'error': 'No valid devices online', 'message': f'Devices ƒë∆∞·ª£c ch·ªçn kh√¥ng online. C√≥ s·∫µn: {adb_devices}. ƒê√£ ch·ªçn: {original_device_ids}'}
            
            # **S·∫ÆPX·∫æP DEVICES THEO PORT**
            def get_port_number(device_id):
                if device_id.startswith('emulator-'):
                    try:
                        return int(device_id.split('-')[1])
                    except:
                        return 99999
                else:
                    return 0
            
            sorted_device_ids = sorted(valid_devices, key=get_port_number)
            logger.info(f"üìã Sorted valid devices: {sorted_device_ids}")
            
            # **K·∫æT N·ªêI T·∫§T C·∫¢ DEVICES QUA U2 SONG SONG**
            logger.info(f"Connecting {len(sorted_device_ids)} devices via U2...")
            connected_devices = global_u2_pool.initialize_connections(sorted_device_ids)
            
            failed_devices = [device_id for device_id in sorted_device_ids if device_id not in connected_devices]
            
            # Log k·∫øt qu·∫£
            logger.info(f"U2 Connection Results:")
            logger.info(f"  ‚úÖ Connected: {len(connected_devices)}/{len(sorted_device_ids)}")
            logger.info(f"  ‚ùå Failed: {len(failed_devices)}")
            
            if failed_devices:
                logger.warning(f"Failed devices: {failed_devices}")
            
            if not connected_devices:
                return {'success': False, 'error': 'No devices connected via U2', 'failed_devices': failed_devices, 'message': 'Kh√¥ng c√≥ device n√†o k·∫øt n·ªëi U2 th√†nh c√¥ng'}
            
            # C·∫≠p nh·∫≠t device_ids ch·ªâ v·ªõi nh·ªØng devices k·∫øt n·ªëi th√†nh c√¥ng
            self.device_ids = connected_devices
            
            # T·∫°o ThreadPoolExecutor v·ªõi max_workers = s·ªë devices
            num_workers = len(connected_devices)
            self.executor = ThreadPoolExecutor(max_workers=num_workers)
            
            # Log th·ªëng k√™ U2
            stats = self.u2_manager.get_connection_stats()
            logger.info(f"U2 Connection Stats: {stats}")
            
            logger.info(f"‚úÖ Worker pool initialized with {num_workers} workers for U2 devices")
            logger.info("üõë U2 connections ready. Ready for task execution.")
            
            return {'success': True, 'message': f'U2 worker pool initialized with {num_workers} devices', 'workers': num_workers, 'connected_devices': connected_devices, 'failed_devices': failed_devices, 'u2_stats': stats, 'status': 'ready_for_execution'}
            
        except Exception as e:
            logger.error(f"‚ùå Error initializing worker pool: {e}")
            return {'success': False, 'error': str(e)}

    def main(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """Main function ƒë·ªÉ x·ª≠ l√Ω logic registration"""
        try:
            logger.info("üöÄ Starting main registration logic...")
            
            # B∆∞·ªõc 1: Sleep 10 gi√¢y tr∆∞·ªõc
            logger.info("Step 1: TaÃ£m nghiÃâ 5s l√¢ÃÄn 1")
            time.sleep(5)
            
            # B∆∞·ªõc 2: Kh·ªüi t·∫°o worker ƒëa ti·∫øn tr√¨nh x·ª≠ l√Ω song song (sau sleep)
            logger.info("Step 2: Initializing parallel workers...")
            futures = []
            for i, device_id in enumerate(self.device_ids):
                # i s·∫Ω t∆∞∆°ng ·ª©ng v·ªõi row index trong b·∫£ng
                future = self.executor.submit(self.process_device, device_id, i)
                futures.append(future)
                logger.info(f"üöÄ Submitted PARALLEL task {i+1} for device {device_id} -> row {i+1}")
        
            logger.info(f"üìã Total {len(futures)} tasks submitted for PARALLEL execution")    
            # D·ª´ng code t·∫°i ƒë√¢y
            logger.info("üõë Code stopped here as requested")
            
            return {'success': True, 'message': 'U2 workers initialized and running', 'active_workers': len(futures), 'devices': self.device_ids}

        except Exception as e:
            logger.error(f"‚ùå Error in main registration logic: {e}")
            return {'success': False, 'error': str(e)}
        
        finally:
            # Cleanup
            pass

    def process_device(self, device_id: str, device_index: int):
        try:
            
            stt_display = str(device_index + 1)
            d = u2.connect(device_id)

            # **B∆Ø·ªöC 1: Ki·ªÉm tra k·∫øt n·ªëi U2**
            logger.info(f"Processing device {device_id} with U2...")

            # L·∫•y U2 device instance
            u2_device = self.u2_manager.get_device(device_id)

            if not u2_device: 
                error_status = {"stt": stt_display, "trang_thai": "Global U2 Pool: Device not found", "ten_may": device_id, "ket_qua": "", "ho": "", "ten": "", "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
                self.status_manager.update_device_status(device_index, error_status, self.table_manager)
                return f"Error: U2 device not found for {device_id}"

            def test_u2_connection(device):
                """Test function ƒë·ªÉ ch·∫°y v·ªõi lock"""
                device_info = device.device_info
                return {"success": True, "brand": device_info.get('brand', 'Unknown'), "model": device_info.get('model', 'Unknown'), "version": device_info.get('version', 'Unknown')}

            # Th·ª±c thi test v·ªõi lock
            test_result = self.u2_manager.execute_with_lock(device_id, test_u2_connection)
            
            if test_result.get("success"):
                # U2 connection OK
                device_info = test_result
                u2_ready_status = {"stt": stt_display, "trang_thai": f"Global U2 Pool Ready - {device_info.get('brand', 'Unknown')} {device_info.get('model', 'Unknown')}", "ten_may": device_id, "ket_qua": "", "ho": "", "ten": "", "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
                self.status_manager.update_device_status(device_index, u2_ready_status, self.table_manager)
                logger.info(f"‚úÖ U2 ready for {device_id}: {device_info.get('brand', 'Unknown')} {device_info.get('model', 'Unknown')}")
            else:
                error_status = {"stt": stt_display, "trang_thai": f"Global U2 Pool Error: {test_result.get('error', 'Unknown')}", "ten_may": device_id, "ket_qua": "", "ho": "", "ten": "", "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
                self.status_manager.update_device_status(device_index, error_status, self.table_manager)
                return f"U2 Error for {device_id}: {test_result.get('error', 'Unknown')}"
            
            time.sleep(1)
            logger.info("Step 1: TaÃ£m nghiÃâ 5s l√¢ÃÄn 2")
            time.sleep(5)

            # Th∆∞Ã£c hi√™Ã£n th√¢y ƒë√¥Ãâi ng√¥n ng∆∞ÃÉ.
            start_change_language_status = {"stt": stt_display, "trang_thai": "BƒÉÃÅt ƒë√¢ÃÄu ƒë·ªïi ng√¥n ng·ªØ sang ti·∫øng Vi·ªát", "ten_may": device_id, "ket_qua": "", "ho": "", "ten": "", "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}    
            self.status_manager.update_device_status(device_index, start_change_language_status, self.table_manager)
            xu_ly_buoc1 = XuLyBuoc1(device_id)
            language_result = xu_ly_buoc1.thay_doi_ngon_ngu()
            time.sleep(3)
            done_change_language_status = {"stt": stt_display, "trang_thai": "ƒê√£ ƒë·ªïi ng√¥n ng·ªØ sang ti·∫øng Vi·ªát", "ten_may": device_id, "ket_qua": "", "ho": "", "ten": "", "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
            self.status_manager.update_device_status(device_index, done_change_language_status, self.table_manager)

            # # Change info device
            # maxchanger_start_status = {"stt": stt_display, "trang_thai": "ƒêang kh·ªüi ƒë·ªông MaxChanger", "ten_may": device_id, "ket_qua": "", "ho": "", "ten": "", "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
            # self.status_manager.update_device_status(device_index, maxchanger_start_status, self.table_manager)
            # d.app_start('com.minsoftware.maxchanger')
            # time.sleep(5)
            # d.swipe(270, 800, 270, 200)
            # time.sleep(1)
            # d(text="CHANGE INFO").click()
            # time.sleep(5)
            # d.app_stop('com.minsoftware.maxchanger')
            # maxchanger_done_status = {"stt": stt_display, "trang_thai": "ƒê√£ th·ª±c hi·ªán MaxChanger th√†nh c√¥ng", "ten_may": device_id, "ket_qua": "Th√†nh c√¥ng", "ho": "", "ten": "", "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
            # self.status_manager.update_device_status(device_index, maxchanger_done_status, self.table_manager)

            # # TƒÉÃÅt viÃ£ triÃÅ
            # tabvitri_start_status = {"stt": stt_display, "trang_thai": "ƒêang kh·ªüi ƒë·ªông tab ViÃ£ triÃÅ", "ten_may": device_id, "ket_qua": "", "ho": "", "ten": "", "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
            # self.status_manager.update_device_status(device_index, tabvitri_start_status, self.table_manager)
            # d.app_start('com.android.settings', activity='.Settings$LocationSettingsActivity')
            # time.sleep(2)
            # location_switch = d(resourceId="com.android.settings:id/switch_widget")
            # if location_switch.exists and location_switch.info.get('checked', False):
            #     location_switch.click()
            # time.sleep(2)
            # d.app_stop('com.android.settings')
            # tabvitri_done_status = {"stt": stt_display, "trang_thai": "ƒêaÃÉ tƒÉÃÅt ViÃ£ triÃÅ", "ten_may": device_id, "ket_qua": "", "ho": "", "ten": "", "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
            # self.status_manager.update_device_status(device_index, tabvitri_done_status, self.table_manager)


            # Clear data v√† c·∫•p quy·ªÅn storage
            time.sleep(2)
            clear_start_status = {"stt": stt_display, "trang_thai": "ƒêang clear data v√† c·∫•p quy·ªÅn storage", "ten_may": device_id, "ket_qua": "", "ho": "", "ten": "", "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
            self.status_manager.update_device_status(device_index, clear_start_status, self.table_manager)
            
            clear_result = xu_ly_buoc1.clear_and_capquyen_app(["com.facebook.katana", "com.facebook.orca", "com.android.chrome"])
            
            if clear_result.get("success"):
                clear_done_status = {"stt": stt_display, "trang_thai": "ƒê√£ clear data v√† c·∫•p quy·ªÅn storage th√†nh c√¥ng", "ten_may": device_id, "ket_qua": "", "ho": "", "ten": "", "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
            else:
                clear_done_status = {"stt": stt_display, "trang_thai": f"Clear data th·∫•t b·∫°i: {clear_result.get('message', '')}", "ten_may": device_id, "ket_qua": "", "ho": "", "ten": "", "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
            
            self.status_manager.update_device_status(device_index, clear_done_status, self.table_manager)
            time.sleep(2)

            # Ti·∫øn h√†nh reg account v·ªõi v√≤ng l·∫∑p 3 l·∫ßn
            for fb_attempt in range(3):
                logger.info(f"Facebook startup attempt {fb_attempt + 1}/3")
                
                time.sleep(2)
                openfbapp_start_status = {"stt": stt_display, "trang_thai": f"ƒêang kh·ªüi ƒë·ªông Facebook App - l·∫ßn {fb_attempt + 1}", "ten_may": device_id, "ket_qua": "", "ho": "", "ten": "", "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
                self.status_manager.update_device_status(device_index, openfbapp_start_status, self.table_manager)
                d.app_start('com.facebook.katana')
                wait_facebook_result = xu_ly_buoc1.wait_facebook_app()
                time.sleep(10)
                openfbapp_done_status = {"stt": stt_display, "trang_thai": f"ƒê√£ kh·ªüi ƒë·ªông Facebook th√†nh c√¥ng - l·∫ßn {fb_attempt + 1}", "ten_may": device_id, "ket_qua": "", "ho": "", "ten": "", "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
                self.status_manager.update_device_status(device_index, openfbapp_done_status, self.table_manager)

                time.sleep(2)
                if d.xpath('//*[@content-desc="Meta logo" or @content-desc="Logo Meta"]').exists:
                    print(f"ƒê√£ th·∫•y Logo Facebook - l·∫ßn {fb_attempt + 1}")
                    time.sleep(1)
                    d.xpath('//*[@text="Create new account"] | //android.view.ViewGroup[3]/android.widget.Button[1] | //*[@resource-id="android:id/content"]/android.widget.FrameLayout[1]/android.widget.FrameLayout[1]/android.widget.FrameLayout[1]/android.widget.FrameLayout[2]/android.widget.FrameLayout[1]/android.view.ViewGroup[1]/android.view.ViewGroup[1]/android.view.ViewGroup[1]/android.view.ViewGroup[1]/android.widget.Button[1]').click()
                    if d(text="CHO PH√âP").wait(timeout=5) or d(text="B·∫°n t√™n g√¨?").wait(timeout=5):
                        break
                if d.xpath('//*[@text="H√£y t·∫°o t√†i kho·∫£n ƒë·ªÉ k·∫øt n·ªëi v·ªõi b·∫°n b√®, ng∆∞·ªùi th√¢n v√† c·ªông ƒë·ªìng c√≥ chung s·ªü th√≠ch."]').wait(timeout=15):
                    print(f"ƒê√£ th·∫•y H√£y T·∫°o T√†i Kho·∫£n - l·∫ßn {fb_attempt + 1}")
                    time.sleep(1)
                    d.xpath("//android.view.ViewGroup[1]/android.widget.Button[1]").click()
                    if d(text="CHO PH√âP").wait(timeout=5) or d(text="B·∫°n t√™n g√¨?").wait(timeout=5):
                        break
                
                logger.warning(f"Facebook kh·ªüi ƒë·ªông th·∫•t b·∫°i - l·∫ßn {fb_attempt + 1}")
                d.app_stop('com.facebook.katana')
                time.sleep(2)
            else:
                return f"Facebook startup failed after 3 attempts for {device_id}"

            # Ti·∫øp t·ª•c logic sau khi Facebook kh·ªüi ƒë·ªông th√†nh c√¥ng
            if d(text="CHO PH√âP").wait(timeout=5):
                time.sleep(1) 
                d(text="CHO PH√âP").click()
           
            for attempt in range(3):
                logger.info(f"H·ªç t√™n attempt {attempt + 1}/3")
                
                # G√µ text v√†o field
                if d(text="B·∫°n t√™n g√¨?").wait(timeout=5):
                    # L·∫•y random h·ªç t√™n m·ªõi cho m·ªói l·∫ßn th·ª≠
                    with open('dulieu/hoten/Ho.txt', 'r', encoding='utf-8') as f:
                        ho_list = [line.strip() for line in f.readlines() if line.strip() and not line.startswith('#')]
                        random_ho = random.choice(ho_list)
                    with open('dulieu/hoten/Ten.txt', 'r', encoding='utf-8') as f:
                        ten_list = [line.strip() for line in f.readlines() if line.strip() and not line.startswith('#')]
                        random_ten = random.choice(ten_list)
                    print(f"B·∫°n t√™n g√¨? - l·∫ßn {attempt + 1}")
                    time.sleep(1)
                    d(text="H·ªç").click()
                    time.sleep(1)
                    d.send_keys(random_ho)
                    time.sleep(1)
                    d(text="T√™n").click()
                    time.sleep(1)
                    d.send_keys(random_ten)
                    time.sleep(1)
                    d.xpath('//*[@text="Ti·∫øp"]').click()
                    time.sleep(5)
                
                if d(text="B·∫°n t√™n g√¨?").wait(timeout=5):
                    # L·∫•y random h·ªç t√™n m·ªõi cho m·ªói l·∫ßn th·ª≠
                    with open('dulieu/hoten/Ho.txt', 'r', encoding='utf-8') as f:
                        ho_list = [line.strip() for line in f.readlines() if line.strip() and not line.startswith('#')]
                        random_ho = random.choice(ho_list)
                    with open('dulieu/hoten/Ten.txt', 'r', encoding='utf-8') as f:
                        ten_list = [line.strip() for line in f.readlines() if line.strip() and not line.startswith('#')]
                        random_ten = random.choice(ten_list)
                    print(f"B·∫°n t√™n g√¨? v·∫´n xu·∫•t hi·ªán - l·∫ßn {attempt + 1}")
                    time.sleep(1)
                    d(text="H·ªç").click()
                    time.sleep(0.5)
                    d(description="X√≥a vƒÉn b·∫£n H·ªç").click()
                    d.send_keys(random_ho)
                    time.sleep(1)
                    d(text="T√™n").click()
                    time.sleep(0.5)
                    d(description="X√≥a vƒÉn b·∫£n T√™n").click()
                    time.sleep(1)
                    d.send_keys(random_ten)
                    time.sleep(1)
                    d.xpath('//*[@text="Ti·∫øp"]').click()
                    time.sleep(5)

                if d.xpath('//*[@text="Ch·ªçn t√™n c·ªßa b·∫°n"]').wait(timeout=5):
                    time.sleep(1)
                    d.xpath('//*[@text="S·ª≠ d·ª•ng t√™n kh√°c"]').click()
                    time.sleep(2)
                    if d(text="B·∫°n t√™n g√¨?").wait(timeout=5):
                        # L·∫•y random h·ªç t√™n m·ªõi cho m·ªói l·∫ßn th·ª≠
                        with open('dulieu/hoten/Ho.txt', 'r', encoding='utf-8') as f:
                            ho_list = [line.strip() for line in f.readlines() if line.strip() and not line.startswith('#')]
                            random_ho = random.choice(ho_list)
                        with open('dulieu/hoten/Ten.txt', 'r', encoding='utf-8') as f:
                            ten_list = [line.strip() for line in f.readlines() if line.strip() and not line.startswith('#')]
                            random_ten = random.choice(ten_list)
                        print(f"B·∫°n t√™n g√¨? trong ch·ªçn t√™n - l·∫ßn {attempt + 1}")
                        time.sleep(1)
                        d(text="H·ªç").click()
                        time.sleep(1)
                        d.send_keys(random_ho)
                        time.sleep(1)
                        d(text="T√™n").click()
                        time.sleep(1)
                        d.send_keys(random_ten)
                        time.sleep(1)
                        d.xpath('//*[@text="Ti·∫øp"]').click()
                        time.sleep(1)
                
                # Ki·ªÉm tra xem ƒë√£ qua ƒë∆∞·ª£c b∆∞·ªõc h·ªç t√™n ch∆∞a
                if not d(text="B·∫°n t√™n g√¨?").exists and not d.xpath('//*[@text="Ch·ªçn t√™n c·ªßa b·∫°n"]').exists:
                    logger.info(f"H·ªç t√™n th√†nh c√¥ng ·ªü l·∫ßn th·ª≠ {attempt + 1}")
                    break
                elif attempt == 2:
                    logger.warning("ƒê√£ th·ª≠ 3 l·∫ßn nh·∫≠p h·ªç t√™n nh∆∞ng v·∫´n kh√¥ng th√†nh c√¥ng")

            hoten_done_status = {"stt": stt_display, "trang_thai": "ƒêaÃÉ nh√¢Ã£p HoÃ£ T√™n", "ten_may": device_id, "ket_qua": "", "ho": random_ho, "ten": random_ten, "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
            self.status_manager.update_device_status(device_index, hoten_done_status, self.table_manager)
            #####

            if d.xpath('//*[@resource-id="android:id/button1"]').wait(timeout=5):
                print("Button SET xu√¢ÃÅt hi√™Ã£n")
                time.sleep(1)
                d.xpath('//*[@resource-id="android:id/button1"]').click()

            
            if d.xpath('//*[@text="Ng√†y sinh c·ªßa b·∫°n l√† khi n√†o?"]').wait(timeout=5):
                print("Ng√†y sinh c·ªßa b·∫°n l√† khi n√†o?")
                time.sleep(1)
                d.xpath('//*[@text="Ti·∫øp"]').click()
                time.sleep(1)
                d.xpath('//*[@text="Ti·∫øp"]').click()
                time.sleep(3)
                age = random.randint(18, 38)
                d(className="android.widget.EditText").send_keys(str(age))
                time.sleep(1)
                d.xpath('//*[@text="Ti·∫øp"]').click()
                time.sleep(2)
                d.xpath('//*[@text="OK"]').click()
            tuoi_done_status = {"stt": stt_display, "trang_thai": "ƒêaÃÉ nh√¢Ã£p Tu√¥Ãâi = {age}", "ten_may": device_id, "ket_qua": "", "ho": random_ho, "ten": random_ten, "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
            self.status_manager.update_device_status(device_index, tuoi_done_status, self.table_manager)

            if d.xpath('//*[@text="Gi·ªõi t√≠nh c·ªßa b·∫°n l√† g√¨?"]').wait(timeout=5):
                print("Gi·ªõi t√≠nh c·ªßa b·∫°n l√† g√¨?")
                gender = random.choice(["Nam", "N·ªØ"])
                time.sleep(1)
                d.xpath(f'//*[@text="{gender}"]').click()
                time.sleep(1)
                d.xpath('//*[@text="Ti·∫øp"]').click()
            sex_done_status = {"stt": stt_display, "trang_thai": "ChoÃ£n gi∆°ÃÅi tiÃÅnh {gender} ", "ten_may": device_id, "ket_qua": "", "ho": random_ho, "ten": random_ten, "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
            self.status_manager.update_device_status(device_index, sex_done_status, self.table_manager)

            #### X·ª¨ L√ù M·ªíI EMAIL/SƒêT
            if d.xpath('//*[@text="S·ªë di ƒë·ªông c·ªßa b·∫°n l√† g√¨?" or @text="Email c·ªßa b·∫°n l√† g√¨?"]').wait(timeout=10):
                moi_type = self.moi_config.get('moi_type', 'khong_moi') if self.moi_config else 'khong_moi'
                logger.info(f"Detected moi type: {moi_type}")
                
                # X√°c ƒë·ªãnh lo·∫°i m·ªìi (Mail hay SƒêT)
                is_mail_moi = moi_type in ['mail_theo_tep', 'duoi_mail']
                is_sdt_moi = moi_type in ['sdt_theo_tep', 'sdt_dau_so']
                
                if is_mail_moi:
                    # Tr∆∞·ªùng h·ª£p 1: User ch·ªçn m·ªìi Mail
                    if d.xpath('//*[@text="S·ªë di ƒë·ªông c·ªßa b·∫°n l√† g√¨?"]').exists:
                        time.sleep(1)
                        d.xpath('//*[@text="ƒêƒÉng k√Ω b·∫±ng email"]').click()
                        time.sleep(2)
                    
                    # L·∫•y email data d·ª±a tr√™n lo·∫°i m·ªìi
                    if moi_type == 'mail_theo_tep':
                        mail_handler = MailTheoTepHandler()
                        email_data = mail_handler.mailtheotep()
                    else:  # duoi_mail
                        mail_handler = MailDuoiMailHandler()
                        email_data = mail_handler.duoimail()
                    
                    if email_data and d.xpath('//*[@text="Email c·ªßa b·∫°n l√† g√¨?"]').wait(timeout=5):
                        time.sleep(1)
                        d(className="android.widget.EditText").send_keys(email_data)
                        time.sleep(1)
                        d.xpath('//*[@text="Ti·∫øp"]').click()
                        time.sleep(5)
                        if d.xpath('//*[@text="B·∫°n c·∫ßn h·ªó tr·ª£ ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n ∆∞?"]').exists:
                            time.sleep(1)
                            d.xpath('//*[@text="Ti·∫øp t·ª•c t·∫°o t√†i kho·∫£n"]').click()
                            time.sleep(1)
                        email_status = {"stt": stt_display, "trang_thai": f"ƒê√£ nh·∫≠p Email: {moi_type}", "ten_may": device_id, "ket_qua": "", "ho": random_ho, "ten": random_ten, "mat_khau": "", "email_sdt": email_data, "uid": "", "cookie": "", "token": "", "proxy": ""}
                        self.status_manager.update_device_status(device_index, email_status, self.table_manager)
                
                elif is_sdt_moi:
                    # Tr∆∞·ªùng h·ª£p 2: User ch·ªçn m·ªìi SƒêT
                    if d.xpath('//*[@text="Email c·ªßa b·∫°n l√† g√¨?"]').exists:
                        time.sleep(1)
                        d.xpath('//*[@text="ƒêƒÉng k√Ω b·∫±ng s·ªë di ƒë·ªông"]').click()
                        time.sleep(2)
                    # Retry logic cho vi·ªác nh·∫≠p SƒêT (t·ªëi ƒëa 3 l·∫ßn th·ª≠)
                    sdt_success = False
                    sdt_data = None

                    for sdt_attempt in range(3):
                        logger.info(f"SƒêT input attempt {sdt_attempt + 1}/3")

                        # L·∫•y SƒêT data d·ª±a tr√™n lo·∫°i m·ªìi
                        if moi_type == 'sdt_theo_tep':
                            sdt_handler = SDTTheoTepHandler()
                            sdt_data = sdt_handler.sdttheotep()
                        else:  # sdt_dau_so
                            sdt_handler = SDTDauSoHandler()
                            sdt_data = sdt_handler.dauso()
                    
                        if sdt_data and d.xpath('//*[@text="S·ªë di ƒë·ªông c·ªßa b·∫°n l√† g√¨?"]').wait(timeout=5):
                            time.sleep(1)
                            # Clear field tr∆∞·ªõc khi nh·∫≠p (n·∫øu c√≥ s·∫µn text)
                            input_field = d(className="android.widget.EditText")
                            if input_field.exists:
                                input_field.clear_text()
                                time.sleep(0.5)
                            # Nh·∫≠p SƒêT m·ªõi
                            input_field.send_keys(sdt_data)
                            time.sleep(1)
                            logger.info(f"üëÜ Clicking Ti·∫øp button...")
                            d.xpath('//*[@text="Ti·∫øp"]').click()
                            time.sleep(10)
                            if d.xpath('//*[@text="Ti·∫øp t·ª•c t·∫°o t√†i kho·∫£n"]').exists:
                                time.sleep(1)
                                d.xpath('//*[@text="Ti·∫øp t·ª•c t·∫°o t√†i kho·∫£n"]').click()
                                time.sleep(1)
                                break
                            if d.xpath('//*[@text="T·∫°o m·∫≠t kh·∫©u"]').exists:
                                break
                            # Ki·ªÉm tra l·ªói "S·ªë di ƒë·ªông kh√¥ng h·ª£p l·ªá"
                            if d.xpath('//*[@text="S·ªë di ƒë·ªông"]').exists:
                                logger.warning(f"‚ùå Error found with content-desc")
                                continue                        
                        else:
                            logger.error(f"Kh√¥ng l·∫•y ƒë∆∞·ª£c SƒêT ho·∫∑c kh√¥ng t√¨m th·∫•y field nh·∫≠p (l·∫ßn {sdt_attempt + 1})")
                
                if sdt_success:    
                        sdt_status = {"stt": stt_display, "trang_thai": f"ƒê√£ nh·∫≠p SƒêT: {moi_type}", "ten_may": device_id, "ket_qua": "", "ho": random_ho, "ten": random_ten, "mat_khau": "", "email_sdt": sdt_data, "uid": "", "cookie": "", "token": "", "proxy": ""}
                        self.status_manager.update_device_status(device_index, sdt_status, self.table_manager)
                else:
                    # Kh√¥ng c√≥ m·ªìi ƒë∆∞·ª£c ch·ªçn
                    no_moi_status = {"stt": stt_display, "trang_thai": "Kh√¥ng c√≥ m·ªìi ƒë∆∞·ª£c ch·ªçn - d·ª´ng t·∫°i b∆∞·ªõc nh·∫≠p Email/SƒêT", "ten_may": device_id, "ket_qua": "", "ho": random_ho, "ten": random_ten, "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
                    self.status_manager.update_device_status(device_index, no_moi_status, self.table_manager)

            #### X·ª¨ L√ù PASSWORD
            if d.xpath('//*[@text="T·∫°o m·∫≠t kh·∫©u"]').wait(timeout=10):
                password_config = get_password_configuration()
                password_type = password_config.get('password_type', 'randompass')
                custom_password = password_config.get('custom_password', '')
                
                password_result = xu_ly_buoc1.xu_ly_password(password_type, custom_password)
                
                if password_result.get('success'):
                    generated_password = password_result.get('password', '')
                    time.sleep(1)
                    d(className="android.widget.EditText").send_keys(generated_password)
                    time.sleep(1)
                    d.xpath('//*[@text="Ti·∫øp"]').click()
                    time.sleep(3)
                    password_status = {"stt": stt_display, "trang_thai": f"ƒê√£ nh·∫≠p Password: {password_result.get('type', 'unknown')}", "ten_may": device_id, "ket_qua": "", "ho": random_ho, "ten": random_ten, "mat_khau": generated_password, "email_sdt": sdt_data if 'sdt_data' in locals() else (email_data if 'email_data' in locals() else ""), "uid": "", "cookie": "", "token": "", "proxy": ""}
                    self.status_manager.update_device_status(device_index, password_status, self.table_manager)
                else:
                    error_password_status = {"stt": stt_display, "trang_thai": f"L·ªói t·∫°o password: {password_result.get('message', 'Unknown error')}", "ten_may": device_id, "ket_qua": "L·ªói", "ho": random_ho, "ten": random_ten, "mat_khau": "", "email_sdt": sdt_data if 'sdt_data' in locals() else (email_data if 'email_data' in locals() else ""), "uid": "", "cookie": "", "token": "", "proxy": ""}
                    self.status_manager.update_device_status(device_index, error_password_status, self.table_manager)

            if d.xpath('//*[@text="L√∫c kh√°c"]').wait(timeout=5):
                time.sleep(1)
                d.xpath('//*[@text="L√∫c kh√°c"]').click()

            if d.xpath('//*[@text="T√¥i ƒë·ªìng √Ω"]').wait(timeout=15):
                print("T√¥i ƒë√¥ÃÄng yÃÅ xu√¢ÃÅt hi√™Ã£n")
            


            return f"Processed {device_id}"
        except Exception as e:
            logger.error(f"Error processing device {device_id}: {e}")
            error_status = {"stt": stt_display, "trang_thai": f"L·ªói: {str(e)}", "ten_may": device_id, "ket_qua": "L·ªói", "ho": "", "ten": "", "mat_khau": "", "email_sdt": "", "uid": "", "cookie": "", "token": "", "proxy": ""}
            self.status_manager.update_device_status(device_index, error_status, self.table_manager)
            return f"Error processing {device_id}: {e}"

    def __del__(self):
        """Cleanup khi worker b·ªã destroy"""
        if hasattr(self, 'executor') and self.executor:
            self.executor.shutdown(wait=False)
        logger.info("Worker cleaned up (Global U2 Pool connections preserved)")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Facebook Registration Worker')
    parser.add_argument('--config', required=True, help='Configuration file path')
    parser.add_argument('--workers', type=int, default=4, help='Number of workers')
    args = parser.parse_args()

    try:
        # Load config
        with open(args.config, 'r', encoding='utf-8') as f:
            config = json.load(f)
        logger.info("üöÄ Starting Facebook Registration Worker...")
        worker = FacebookRegistrationWorker(max_workers=args.workers)
        init_result = worker.initialize_worker_pool(config)
        
        if init_result.get('success', False):
            final_result = worker.main(config)
            print(json.dumps(final_result, ensure_ascii=False, indent=2))
            sys.exit(0 if final_result.get('success', False) else 1)
        else:
            print(json.dumps(init_result, ensure_ascii=False, indent=2))
            sys.exit(1)
        
    except Exception as e:
        error_result = {'success': False, 'error': str(e)}
        print(json.dumps(error_result))
        logger.error(f"‚ùå Worker failed: {e}")
        sys.exit(1)