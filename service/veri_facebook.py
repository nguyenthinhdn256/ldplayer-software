import logging
import requests
import time
from typing import Dict, Any

logger = logging.getLogger(__name__)

class MailThueSimHandler:
    """X·ª≠ l√Ω verification qua Gmail thuesim.app"""
    def __init__(self, api_key=None, gmail_account=None):
        self.api_key = api_key
        self.gmail_account = gmail_account
        logger.info(f"Kh·ªüi t·∫°o MailThueSimHandler v·ªõi API: {api_key}")
    
    def verify(self):
        """Logic x·ª≠ l√Ω verification cho thuesim.app"""
        logger.info("ƒêang x·ª≠ l√Ω verification qua thuesim.app")
        # TODO: Th√™m logic x·ª≠ l√Ω ·ªü ƒë√¢y
        pass

class MailIronSimHandler:
    """X·ª≠ l√Ω verification qua Gmail ironsim.com"""
    def __init__(self, api_key=None):
        self.api_key = api_key
        logger.info(f"Kh·ªüi t·∫°o MailIronSimHandler v·ªõi API: {api_key}")
    
    def verify(self):
        """Logic x·ª≠ l√Ω verification cho ironsim.com"""
        logger.info("ƒêang x·ª≠ l√Ω verification qua ironsim.com")
        # TODO: Th√™m logic x·ª≠ l√Ω ·ªü ƒë√¢y
        pass

class RegClone2FAHandler:
    """X·ª≠ l√Ω verification qua Hotmail regclone2fa.com"""
    def __init__(self, api_key=None):
        self.api_key = api_key
        logger.info(f"Kh·ªüi t·∫°o RegClone2FAHandler v·ªõi API: {api_key}")
    
    def verify(self):
        """Logic x·ª≠ l√Ω verification cho regclone2fa.com"""
        logger.info("ƒêang x·ª≠ l√Ω verification qua regclone2fa.com")
        # TODO: Th√™m logic x·ª≠ l√Ω ·ªü ƒë√¢y
        pass

class DongVanFBHandler:
    """X·ª≠ l√Ω verification qua Hotmail dongvanfb.net"""
    def __init__(self, api_key=None, account=None):
        self.api_key = api_key
        self.account = account
        logger.info(f"Kh·ªüi t·∫°o DongVanFBHandler v·ªõi API: {api_key}")
    
    def verify(self):
        """Logic x·ª≠ l√Ω verification cho dongvanfb.net"""
        logger.info("ƒêang x·ª≠ l√Ω verification qua dongvanfb.net")
        # TODO: Th√™m logic x·ª≠ l√Ω ·ªü ƒë√¢y
        pass

class InputMailHandler:
    """X·ª≠ l√Ω verification qua Input Mail"""
    def __init__(self):
        logger.info("Kh·ªüi t·∫°o InputMailHandler")
    
    def verify(self):
        """Logic x·ª≠ l√Ω verification cho Input Mail"""
        logger.info("ƒêang x·ª≠ l√Ω verification qua Input Mail")
        # TODO: Th√™m logic x·ª≠ l√Ω ·ªü ƒë√¢y
        pass

class SimVIOTPHandler:
    """X·ª≠ l√Ω verification qua SIM viotp.com"""
    def __init__(self, api_key=None):
        self.api_key = api_key
        logger.info(f"Kh·ªüi t·∫°o SimVIOTPHandler v·ªõi API: {api_key}")
    
    def verify(self):
        """Logic x·ª≠ l√Ω verification cho viotp.com"""
        logger.info("ƒêang x·ª≠ l√Ω verification qua viotp.com")
        # TODO: Th√™m logic x·ª≠ l√Ω ·ªü ƒë√¢y
        pass

class SMSIronSimHandler:
    """X·ª≠ l√Ω verification qua SIM ironsim.com"""
    def __init__(self, api_key=None, account=None):
        self.api_key = api_key
        self.account = account

        logger.info(f"Kh·ªüi t·∫°o SMSIronSimHandler v·ªõi API: {api_key}")
    
    def verify(self, device, device_id: str, device_index: int):
        """Logic x·ª≠ l√Ω verification cho ironsim.com SMS"""
        logger.info("ƒêang x·ª≠ l√Ω verification qua ironsim.com SMS")
        
        if device.xpath('//*[@text="Nh·∫≠p m√£ x√°c nh·∫≠n"]').exists(timeout=5):
            time.sleep(1)
            device.xpath('//*[@text="T√¥i kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£"]').click()

        pass

class FunOTPHandler:
    """X·ª≠ l√Ω verification qua SIM funotp.com"""
    def __init__(self, api_key=None, parent_window=None):
        self.api_key = api_key
        self.parent_window = parent_window
        self.base_url = "https://funotp.com/api"
        logger.info(f"Kh·ªüi t·∫°o FunOTPHandler v·ªõi API: {api_key}")

    def rent_number(self):
        """Thu√™ s·ªë ƒëi·ªán tho·∫°i t·ª´ FunOTP API - kh√¥ng ch·ªâ ƒë·ªãnh operator"""
        try:
            if not self.api_key and self.parent_window:
                self.api_key = get_sms_api_key('funotp', self.parent_window)

            if not self.api_key:
                logger.error("API key kh√¥ng ƒë∆∞·ª£c cung c·∫•p")
                return {"success": False, "error": "API key kh√¥ng ƒë∆∞·ª£c cung c·∫•p"}
            
            # Tham s·ªë request - kh√¥ng ch·ªâ ƒë·ªãnh operator
            params = { "action": "number", "service": "facebook", "apikey": self.api_key }

            logger.info(f"ƒêang request thu√™ s·ªë v·ªõi params: {params}")
            
            # G·ª≠i request
            response = requests.get(self.base_url, params=params, timeout=30)
            response.raise_for_status()
            
            # Parse JSON response
            result = response.json()
            logger.info(f"API Response: {result}")
            
            # Ki·ªÉm tra response code
            if result.get("ResponseCode") == 0 and "Result" in result:
                number = result["Result"].get("number")
                sim_id = result["Result"].get("id")
                operator = result["Result"].get("operator", "Unknown")
                price = result["Result"].get("price")
                balance = result["Result"].get("balance")
                
                if number and sim_id:
                    logger.info(f"‚úÖ Thu√™ s·ªë th√†nh c√¥ng: {number} (ID: {sim_id}) - Operator: {operator}")
                    return { "success": True, "number": number, "id": sim_id, "operator": operator, "price": price, "balance": balance, "full_response": result["Result"] }
                else:
                    logger.error(f"Response thi·∫øu th√¥ng tin: {result}")
                    return {"success": False, "error": "Response thi·∫øu number ho·∫∑c id"}
            else:
                error_msg = result.get("Message", "Unknown error")
                response_code = result.get("ResponseCode")
                logger.error(f"API error: ResponseCode={response_code}, Message={error_msg}")
                return {"success": False, "error": f"API error: {error_msg} (Code: {response_code})"}
                    
        except requests.exceptions.RequestException as e:
            logger.error(f"Network error khi thu√™ s·ªë FunOTP: {e}")
            return {"success": False, "error": f"Network error: {str(e)}"}
        except ValueError as e:
            logger.error(f"JSON parse error: {e}")
            return {"success": False, "error": f"Invalid JSON response: {str(e)}"}
        except Exception as e:
            logger.error(f"Unexpected error khi thu√™ s·ªë FunOTP: {e}")
            return {"success": False, "error": f"Unexpected error: {str(e)}"}

    def get_otp_code(self, sim_id: str, max_attempts: int = 12, delay: int = 5):
        """Nh·∫≠n m√£ OTP t·ª´ FunOTP API v·ªõi retry - 12 l·∫ßn, m·ªói l·∫ßn 5s"""
        import time
        
        try:
            # L·∫•y API key t·ª´ GUI n·∫øu ch∆∞a c√≥
            if not self.api_key and self.parent_window:
                self.api_key = get_sms_api_key('funotp', self.parent_window)
            
            if not self.api_key or not sim_id:
                return {"success": False, "error": "Thi·∫øu API key ho·∫∑c Sim ID"}
            
            logger.info(f"üîÑ B·∫Øt ƒë·∫ßu l·∫•y OTP cho ID: {sim_id} - {max_attempts} l·∫ßn, m·ªói l·∫ßn {delay}s")
            
            # Retry loop - 12 l·∫ßn, m·ªói l·∫ßn 5s
            for attempt in range(max_attempts):
                logger.info(f"L·∫ßn th·ª≠ l·∫•y OTP {attempt + 1}/{max_attempts} cho ID: {sim_id}")
                
                try:
                    # Request API
                    url = f"{self.base_url}?action=code&id={sim_id}&apikey={self.api_key}"
                    response = requests.get(url, timeout=30)
                    result = response.json()
                    
                    logger.info(f"üìã API Response: {result}")
                    
                    # Ki·ªÉm tra response
                    if result.get("ResponseCode") == 0 and "Result" in result:
                        otp_code = result["Result"].get("otp")
                        sms_content = result["Result"].get("SMS")
                        
                        if otp_code:
                            logger.info(f"‚úÖ L·∫•y OTP th√†nh c√¥ng: {otp_code}")
                            return { "success": True, "otp": otp_code, "sms": sms_content, "attempt": attempt + 1 }
                    
                    # ResponseCode != 0 ho·∫∑c ch∆∞a c√≥ OTP
                    logger.info(f"‚è≥ Ch∆∞a c√≥ OTP (ResponseCode: {result.get('ResponseCode')})")
                    
                    # ƒê·ª£i v√† th·ª≠ l·∫°i (tr·ª´ l·∫ßn cu·ªëi)
                    if attempt < max_attempts - 1:
                        logger.info(f"‚è≥ ƒê·ª£i {delay}s tr∆∞·ªõc l·∫ßn th·ª≠ ti·∫øp theo...")
                        time.sleep(delay)
                        
                except Exception as request_error:
                    logger.error(f"‚ùå L·ªói request l·∫ßn {attempt + 1}: {request_error}")
                    if attempt < max_attempts - 1:
                        time.sleep(delay)
            
            # H·∫øt s·ªë l·∫ßn th·ª≠
            logger.error(f"‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c OTP sau {max_attempts} l·∫ßn th·ª≠")
            return { "success": False, "error": f"Kh√¥ng nh·∫≠n ƒë∆∞·ª£c OTP sau {max_attempts} l·∫ßn th·ª≠ ({max_attempts * delay}s)", "total_attempts": max_attempts }
            
        except Exception as e:
            logger.error(f"‚ùå Error getting OTP: {e}")
            return {"success": False, "error": str(e)}
    
    def execute_verification(self, device, device_id: str, device_index: int):
        """Function th·ª±c thi verification cho FunOTP"""
        try:
            logger.info(f"B·∫Øt ƒë·∫ßu th·ª±c thi verification FunOTP cho device {device_id}")
            
            # Ki·ªÉm tra v√† th·ª±c hi·ªán c√°c b∆∞·ªõc verification
            if device.xpath('//*[@text="Nh·∫≠p m√£ x√°c nh·∫≠n"]').exists:
                time.sleep(1)
                device.xpath('//*[@text="T√¥i kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£"]').click()
                time.sleep(2)
                device.xpath('//*[@text="ƒê·ªïi s·ªë di ƒë·ªông"]').click()
                time.sleep(1)

                found_verification = False 
                for sdt_attempt in range(3):
                    if found_verification:  # Ki·ªÉm tra flag
                        break

                    # Thu√™ s·ªë ƒëi·ªán tho·∫°i
                    rent_result = self.rent_number()
                    if not rent_result.get("success"):
                        return {"success": False, "error": f"Rent number failed: {rent_result.get('error')}"}
                    phone_number = rent_result.get("number")
                    sim_id = rent_result.get("id")
                    
                    input_field = device(className="android.widget.EditText")
                    if input_field.exists:
                        input_field.clear_text()
                        time.sleep(0.5)
                    # Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i
                    input_field = device.xpath("//android.widget.EditText")
                    if input_field.exists:
                        input_field.set_text(phone_number)  # Thay send_keys b·∫±ng set_text
                    else:
                        return {"success": False, "error": "Kh√¥ng t√¨m th·∫•y field nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"}
                    time.sleep(1)
                    device.xpath('//*[@text="Ti·∫øp"]').click()
                    xpaths = [
                        '//*[@text="Nh·∫≠p m√£ x√°c nh·∫≠n"]',
                        '//*[@text="X√°c nh·∫≠n s·ªë di ƒë·ªông c·ªßa b·∫°n qua WhatsApp"]', 
                        '//*[@text="X√°c nh·∫≠n s·ªë di ƒë·ªông qua SMS"]'
                    ]
                    for attempt in range(30):
                        if any(device.xpath(xpath).exists for xpath in xpaths):
                            print(f"C√≥ √≠t nh·∫•t 1 button (l·∫ßn th·ª≠ {attempt + 1})")
                            found_verification = True
                            break
                        time.sleep(1)  # ƒê·ª£i 1 gi√¢y tr∆∞·ªõc l·∫ßn th·ª≠ ti·∫øp theo
                    
                    if found_verification:  # Ki·ªÉm tra flag ƒë·ªÉ tho√°t v√≤ng l·∫∑p 3
                        break

                    if device.xpath('//*[@text="S·ªë di ƒë·ªông"]').exists:
                        logger.warning("S√¥ÃÅ  ƒëaÃÉ s∆∞Ãâ duÃ£ng. Ti√™ÃÅp tuÃ£c thu√™")
                        continue  
                    time.sleep(2)

                if device.xpath('//*[@text="X√°c nh·∫≠n s·ªë di ƒë·ªông c·ªßa b·∫°n qua WhatsApp" or @text="X√°c nh·∫≠n s·ªë di ƒë·ªông qua SMS"]').exists:
                    time.sleep(1)
                    if device.xpath('//*[@text="Th·ª≠ c√°ch kh√°c"]').exists:
                        time.sleep(1)
                        device.xpath('//*[@text="Th·ª≠ c√°ch kh√°c"]').click()
                        time.sleep(1)
                    if device.xpath('//*[@text="G·ª≠i m√£ qua SMS"]').exists:
                        time.sleep(1)
                        device.xpath('//*[@text="G·ª≠i m√£ qua SMS"]').click()
                        time.sleep(1)
                        device.xpath('//*[@text="Ti·∫øp t·ª•c"]').click()

                time.sleep(5)
                
                # Nh·∫≠n OTP code
                otp_result = self.get_otp_code(sim_id)
                if not otp_result.get("success"):
                    return {"success": False, "error": f"Get OTP failed: {otp_result.get('error')}"}
                otp_code = otp_result.get("otp")
                time.sleep(1)
                otp_field = device.xpath("//android.widget.EditText")
                if otp_field.exists:
                    otp_field.set_text(otp_code)  # Thay send_keys b·∫±ng set_text
                else:
                    return {"success": False, "error": "Kh√¥ng t√¨m th·∫•y field nh·∫≠p OTP"}
                time.sleep(1)
                # device.xpath('//*[@text="Ti·∫øp"]').click()


                logger.info(f"ƒê√£ th·ª±c hi·ªán c√°c b∆∞·ªõc verification cho device {device_id}")
                return {"success": True, "message": "Verification steps completed"}
            else:
                logger.warning(f"Kh√¥ng t√¨m th·∫•y m√†n h√¨nh 'Nh·∫≠p m√£ x√°c nh·∫≠n' tr√™n device {device_id}")
                return {"success": False, "error": "Kh√¥ng t√¨m th·∫•y m√†n h√¨nh x√°c nh·∫≠n"}
                
        except Exception as e:
            logger.error(f"L·ªói khi th·ª±c thi verification FunOTP cho device {device_id}: {e}")
            return {"success": False, "error": str(e)}

class FiveSimHandler:
    """X·ª≠ l√Ω verification qua SIM 5sim.com"""
    def __init__(self, api_key=None):
        self.api_key = api_key
        logger.info(f"Kh·ªüi t·∫°o FiveSimHandler v·ªõi API: {api_key}")
    
    def verify(self):
        """Logic x·ª≠ l√Ω verification cho 5sim.com"""
        logger.info("ƒêang x·ª≠ l√Ω verification qua 5sim.com")
        # TODO: Th√™m logic x·ª≠ l√Ω ·ªü ƒë√¢y
        pass

class SMS368Handler:
    """X·ª≠ l√Ω verification qua SIM 368sms.com"""
    def __init__(self, api_key=None):
        self.api_key = api_key
        logger.info(f"Kh·ªüi t·∫°o SMS368Handler v·ªõi API: {api_key}")
    
    def verify(self):
        """Logic x·ª≠ l√Ω verification cho 368sms.com"""
        logger.info("ƒêang x·ª≠ l√Ω verification qua 368sms.com")
        # TODO: Th√™m logic x·ª≠ l√Ω ·ªü ƒë√¢y
        pass

class HCOTPHandler:
    """X·ª≠ l√Ω verification qua SIM hcotp.com"""
    def __init__(self, api_key=None):
        self.api_key = api_key
        logger.info(f"Kh·ªüi t·∫°o HCOTPHandler v·ªõi API: {api_key}")
    
    def verify(self):
        """Logic x·ª≠ l√Ω verification cho hcotp.com"""
        logger.info("ƒêang x·ª≠ l√Ω verification qua hcotp.com")
        # TODO: Th√™m logic x·ª≠ l√Ω ·ªü ƒë√¢y
        pass

class SMSThueSimHandler:
    """X·ª≠ l√Ω verification qua SIM thuesim.app"""
    def __init__(self, api_key=None, gmail_account=None):
        self.api_key = api_key
        self.gmail_account = gmail_account
        logger.info(f"Kh·ªüi t·∫°o SMSThueSimHandler v·ªõi API: {api_key}")
    
    def verify(self):
        """Logic x·ª≠ l√Ω verification cho thuesim.app SMS"""
        logger.info("ƒêang x·ª≠ l√Ω verification qua thuesim.app SMS")
        # TODO: Th√™m logic x·ª≠ l√Ω ·ªü ƒë√¢y
        pass

class Sim24Handler:
    """X·ª≠ l√Ω verification qua SIM sim24.cc"""
    def __init__(self, api_key=None):
        self.api_key = api_key
        logger.info(f"Kh·ªüi t·∫°o Sim24Handler v·ªõi API: {api_key}")
    
    def verify(self):
        """Logic x·ª≠ l√Ω verification cho sim24.cc"""
        logger.info("ƒêang x·ª≠ l√Ω verification qua sim24.cc")
        # TODO: Th√™m logic x·ª≠ l√Ω ·ªü ƒë√¢y
        pass

class VerificationHandlerFactory:
    """Factory class ƒë·ªÉ t·∫°o handler ph√π h·ª£p"""
    
    @staticmethod
    def create_handler(handler_type, **kwargs):
        handlers = {
            'mailthuesim': MailThueSimHandler,
            'mailironsim': MailIronSimHandler,
            'regclone2fa': RegClone2FAHandler,
            'dongvanfb': DongVanFBHandler,
            'inputmail': InputMailHandler,
            'simviotp': SimVIOTPHandler,
            'smsironsim': SMSIronSimHandler,
            'funotp': FunOTPHandler,
            '5sim': FiveSimHandler,
            '368sms': SMS368Handler,
            'hcotp': HCOTPHandler,
            'smsthuesim': SMSThueSimHandler,
            'sim24': Sim24Handler
        }
        
        handler_class = handlers.get(handler_type)
        if handler_class:
            return handler_class(**kwargs)
        else:
            logger.error(f"Kh√¥ng t√¨m th·∫•y handler cho lo·∫°i: {handler_type}")
            return None
        

# Config ƒë√™Ãâ l√¢ÃÅy api key t∆∞ÃÄ Gui        
def get_sms_api_key(sms_type: str, parent_window=None) -> str:
    # Mapping t·ª´ sms_type ƒë·∫øn t√™n field trong GUI
    field_mapping = {
        'simviotp': 'sim_viotp_input',
        'smsironsim': 'sim_smsironsim_input2',  # Input th·ª© 2 ch·ª©a API key
        'funotp': 'sim_funotp_input',
        '5sim': 'sim_5sim_input',
        '368sms': 'sim_368sms_input',
        'hcotp': 'sim_hcotp_input',
        'smsthuesim': 'sim_smsthuesim_input',
        'sim24': 'sim_sim24_input'
    }
    
    try:
        # Ki·ªÉm tra sms_type h·ª£p l·ªá
        if sms_type not in field_mapping:
            logger.error(f"SMS type kh√¥ng h·ª£p l·ªá: {sms_type}")
            return ""
        field_name = field_mapping[sms_type]
        # Traverse ƒë·ªÉ t√¨m app window
        app_window = parent_window
        while app_window and not hasattr(app_window, 'groupbox4_manager'):
            app_window = app_window.master if hasattr(app_window, 'master') else None
        
        if app_window and hasattr(app_window, 'groupbox4_manager'):
            groupbox4_manager = app_window.groupbox4_manager
            
            # Ki·ªÉm tra groupbox2_manager v√† field c·ª• th·ªÉ
            if (hasattr(groupbox4_manager, 'groupbox2_manager') and 
                hasattr(groupbox4_manager.groupbox2_manager, field_name)):
                
                input_field = getattr(groupbox4_manager.groupbox2_manager, field_name)
                api_key = input_field.get().strip()
                return api_key if api_key else ""
        return ""
        
    except Exception as e:
        logger.error(f"Error getting {sms_type} API key: {e}")
        return ""