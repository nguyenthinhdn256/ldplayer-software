import subprocess, time
import logging
from appium import webdriver
from appium.webdriver.common.mobileby import MobileBy
from typing import Dict, Any

logger = logging.getLogger(__name__)

class XuLyBuoc1:
    """Class x·ª≠ l√Ω b∆∞·ªõc 1 trong qu√° tr√¨nh t·∫°o t√†i kho·∫£n Facebook"""
    
    def __init__(self, device_id: str):
        self.device_id = device_id
        self.logger = logging.getLogger(__name__)
    
    def thay_doi_ngon_ngu(self) -> dict:
        """Thay ƒë·ªïi ng√¥n ng·ªØ thi·∫øt b·ªã sang ti·∫øng Vi·ªát"""
        return change_device_language_to_vietnamese(self.device_id)
    
    def clear_and_capquyen_app(self, app_packages: list = None) -> dict:
        """Clear d·ªØ li·ªáu v√† c·∫•p quy·ªÅn storage cho c√°c app"""
        return clear_and_capquyen_app(self.device_id, app_packages)
    
    def wait_facebook_app(self) -> dict:
        """Funtion ƒë∆°Ã£i app facebook load thanh c√¥ng"""
        return wait_for_facebook_fully_loaded(self.device_id)
    
    def xu_ly_password(self, password_type: str, custom_password: str = "") -> dict:
        """Method wrapper ƒë·ªÉ g·ªçi function xulypassword"""
        return xulypassword(password_type, custom_password)
    
def change_device_language_to_vietnamese(device_id: str) -> dict:
    try:
        logger.info(f"Changing language to Vietnamese for device: {device_id}")
        
        # B∆∞·ªõc 1: C·∫•p quy·ªÅn cho ·ª©ng d·ª•ng ADB Change Language
        grant_cmd = ["adb", "-s", device_id, "shell", "pm", "grant", "net.sanapeli.adbchangelanguage", "android.permission.CHANGE_CONFIGURATION"]
        grant_result = subprocess.run(grant_cmd, capture_output=True, text=True, timeout=30)
        logger.info(f"Grant permission result for {device_id}: {grant_result.returncode}")

        time.sleep(2)
        
        # B∆∞·ªõc 2: Thay ƒë·ªïi ng√¥n ng·ªØ sang ti·∫øng Vi·ªát
        change_cmd = ["adb", "-s", device_id, "shell", "am", "start", "-n", "net.sanapeli.adbchangelanguage/.AdbChangeLanguage", "-e", "language", "vi"]
        change_result = subprocess.run(change_cmd, capture_output=True, text=True, timeout=30)
        logger.info(f"Change language result for {device_id}: {change_result.returncode}")
        
        return {"success": True, "message": f"Language changed to Vietnamese for device {device_id}", "grant_returncode": grant_result.returncode, "change_returncode": change_result.returncode}
        
    except subprocess.TimeoutExpired:
        logger.error(f"Timeout when changing language for device {device_id}")
        return {"success": False, "message": f"Timeout when changing language for device {device_id}"}
    except Exception as e:
        logger.error(f"Error changing language for device {device_id}: {str(e)}")
        return {"success": False, "message": f"Error changing language for device {device_id}: {str(e)}"}

def clear_and_capquyen_app(device_id: str, app_packages: list = None) -> dict:
    """Clear d·ªØ li·ªáu v√† c·∫•p quy·ªÅn storage cho c√°c app"""
    try:
        logger.info(f"Clearing data and granting permissions for device: {device_id}")
        
        # Danh s√°ch app m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
        if app_packages is None:
            app_packages = ["com.facebook.katana", "com.facebook.orca", "com.android.chrome", "com.google.android.gms"]
        
        # Clear data cho t·∫•t c·∫£ apps
        for package in app_packages:
            try:
                clear_cmd = ["adb", "-s", device_id, "shell", "pm", "clear", package]
                subprocess.run(clear_cmd, capture_output=True, text=True, timeout=15)
                logger.info(f"Cleared data for {package} on {device_id}")
            except Exception as e:
                logger.warning(f"Failed to clear {package} on {device_id}: {e}")
        
        # C·∫•p quy·ªÅn READ_EXTERNAL_STORAGE v√† WRITE_EXTERNAL_STORAGE cho t·∫•t c·∫£ apps
        permissions = ["android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE","android.permission.READ_CONTACTS"]
        for package in app_packages:
            for permission in permissions:
                try:
                    grant_cmd = ["adb", "-s", device_id, "shell", "pm", "grant", package, permission]
                    subprocess.run(grant_cmd, capture_output=True, text=True, timeout=10)
                    logger.info(f"Granted {permission} to {package} on {device_id}")
                except Exception as e:
                    logger.warning(f"Failed to grant {permission} to {package} on {device_id}: {e}")
        
        return {"success": True, "message": f"Cleared data and granted permissions for {len(app_packages)} apps on {device_id}", "processed_apps": app_packages}
        
    except Exception as e:
        logger.error(f"Error in clear_and_capquyen_app for {device_id}: {str(e)}")
        return {"success": False, "message": f"Error in clear_and_capquyen_app for {device_id}: {str(e)}"}
    
# ƒê∆°Ã£i app facebook load thaÃÄnh c√¥ng
def wait_for_facebook_fully_loaded(d, timeout=60):
    """Ch·ªù Facebook kh·ªüi ƒë·ªông ho√†n to√†n v√† in ra k·∫øt qu·∫£ ph√°t hi·ªán ƒë∆∞·ª£c"""
    
    # B∆∞·ªõc 1: Ch·ªù app ch·∫°y foreground
    print("ƒêang ch·ªù Facebook kh·ªüi ƒë·ªông...")
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        try:
            current_app = d.app_current()
            if current_app.get('package') == 'com.facebook.katana':
                print("‚úÖ Facebook ƒë√£ ch·∫°y foreground")
                break
        except:
            pass
        time.sleep(1)
    else:
        print("‚ùå Facebook kh√¥ng kh·ªüi ƒë·ªông trong th·ªùi gian quy ƒë·ªãnh")
        return False
    
    # B∆∞·ªõc 2: Ch·ªù UI elements xu·∫•t hi·ªán
    print("ƒêang ch·ªù UI Facebook load...")
    time.sleep(2)  # Cho app ·ªïn ƒë·ªãnh
    
    ui_selectors = [
        {'method': 'text', 'value': 'ƒêƒÉng k√Ω Facebook'},
        {'method': 'text', 'value': 'T·∫°o t√†i kho·∫£n m·ªõi'},
        {'method': 'text', 'value': 'ƒêƒÉng nh·∫≠p'},
        {'method': 'resourceId', 'value': 'com.facebook.katana:id/login_button'},
        {'method': 'className', 'value': 'android.widget.Button'}
    ]
    
    found_elements = []  # Danh s√°ch l∆∞u c√°c element ƒë√£ t√¨m th·∫•y
    
    for attempt in range(20):  # Th·ª≠ 20 l·∫ßn, m·ªói l·∫ßn 1s
        for selector in ui_selectors:
            try:
                if selector['method'] == 'text':
                    if d(text=selector['value']).exists:
                        element_info = selector['value']
                        if element_info not in found_elements:
                            found_elements.append(element_info)
                            print(f"‚úÖ Text element t√¨m th·∫•y: '{element_info}'")
                        
                elif selector['method'] == 'resourceId':
                    if d(resourceId=selector['value']).exists:
                        element_info = selector['value']
                        if element_info not in found_elements:
                            found_elements.append(element_info)
                            print(f"‚úÖ ResourceId element t√¨m th·∫•y: '{element_info}'")
                        
                elif selector['method'] == 'className':
                    if d(className=selector['value']).exists:
                        element_info = selector['value']
                        if element_info not in found_elements:
                            found_elements.append(element_info)
                            print(f"‚úÖ ClassName element t√¨m th·∫•y: '{element_info}'")
                            
            except Exception as e:
                continue
        
        # N·∫øu ƒë√£ t√¨m th·∫•y √≠t nh·∫•t 1 element quan tr·ªçng, return True
        if found_elements:
            print(f"üéâ Facebook UI ƒë√£ load th√†nh c√¥ng!")
            print(f"üìã C√°c element ƒë√£ ph√°t hi·ªán: {found_elements}")
            return True
            
        time.sleep(1)
    
    print("‚ùå Facebook UI kh√¥ng load ƒë·∫ßy ƒë·ªß - kh√¥ng t√¨m th·∫•y element n√†o")
    return False

##########################
# X∆∞Ãâ lyÃÅ logic cho password
def xulypassword(password_type: str, custom_password: str = "") -> dict:
    """X·ª≠ l√Ω t·∫°o password theo lo·∫°i ƒë∆∞·ª£c ch·ªçn (random ho·∫∑c custom)"""
    try:
        if password_type == "randompass":
            # T·∫°o random password: 8 ch·ªØ c√°i + 4 s·ªë + 2 k√Ω t·ª± ƒë·∫∑c bi·ªát
            import random, string
            chu_cai = ''.join(random.choices(string.ascii_letters, k=8))  # 8 k√Ω t·ª± ch·ªØ (c·∫£ th∆∞·ªùng v√† hoa)
            so = ''.join(random.choices(string.digits, k=4))  # 4 k√Ω t·ª± s·ªë
            ky_tu_dac_biet = ''.join(random.choices("!@#$%&", k=2))  # 2 k√Ω t·ª± ƒë·∫∑c bi·ªát
            random_password = chu_cai + so + ky_tu_dac_biet
            # Tr·ªôn ng·∫´u nhi√™n th·ª© t·ª± c√°c k√Ω t·ª±
            password_list = list(random_password)
            random.shuffle(password_list)
            final_password = ''.join(password_list)
            logger.info(f"Generated random password: {final_password}")
            return {"success": True, "password": final_password, "type": "random"}
        
        elif password_type == "custompass":
            # X·ª≠ l√Ω password do user t·ª± nh·∫≠p
            if not custom_password or len(custom_password.strip()) == 0:
                return {"success": False, "message": "Custom password kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"}
            if len(custom_password.strip()) < 6:
                return {"success": False, "message": "Custom password ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±"}
            final_password = custom_password.strip()
            logger.info(f"Using custom password: {final_password}")
            return {"success": True, "password": final_password, "type": "custom"}
        
        else:
            return {"success": False, "message": f"Password type kh√¥ng h·ª£p l·ªá: {password_type}"}
            
    except Exception as e:
        logger.error(f"Error in xulypassword: {str(e)}")
        return {"success": False, "message": f"L·ªói x·ª≠ l√Ω password: {str(e)}"}
    
def get_password_configuration(parent_window=None) -> Dict[str, str]:
    """L·∫•y c·∫•u h√¨nh password t·ª´ GUI"""
    try:
        app_window = parent_window
        while app_window and not hasattr(app_window, 'groupbox4_manager'):
            app_window = app_window.master if hasattr(app_window, 'master') else None
        
        if app_window and hasattr(app_window, 'groupbox4_manager'):
            groupbox4_manager = app_window.groupbox4_manager
            if hasattr(groupbox4_manager, 'groupbox3_manager'):
                groupbox3_manager = groupbox4_manager.groupbox3_manager
                password_type = groupbox3_manager.app_selection_var.get()
                custom_password = ""
                
                # L·∫•y custom password n·∫øu user ch·ªçn custompass
                if password_type == "custompass" and hasattr(groupbox3_manager, 'custompass_input'):
                    custom_password = groupbox3_manager.custompass_input.get()
                
                return {"password_type": password_type if password_type in ["randompass", "custompass"] else "randompass", "custom_password": custom_password}
        
        return {"password_type": "randompass", "custom_password": ""}
    except Exception as e:
        logger.error(f"Error getting password configuration: {e}")
        return {"password_type": "randompass", "custom_password": ""}
##########################
# X∆∞Ãâ lyÃÅ T√¥i ƒê√¥ÃÄng YÃÅ
def get_click_dongy_configuration(parent_window=None) -> int:
    """L·∫•y c·∫•u h√¨nh s·ªë l·∫ßn click 'T√¥i ƒë·ªìng √Ω' t·ª´ GUI"""
    try:
        app_window = parent_window
        while app_window and not hasattr(app_window, 'groupbox4_manager'):
            app_window = app_window.master if hasattr(app_window, 'master') else None
        
        if app_window and hasattr(app_window, 'groupbox4_manager'):
            groupbox4_manager = app_window.groupbox4_manager
            if hasattr(groupbox4_manager, 'groupbox3_manager') and hasattr(groupbox4_manager.groupbox3_manager, 'click_dongy_input'):
                try:
                    click_count = int(groupbox4_manager.groupbox3_manager.click_dongy_input.get())
                    return max(1, click_count)  # T·ªëi thi·ªÉu l√† 1
                except (ValueError, AttributeError):
                    return 3  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
        
        return 3  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c
    except Exception as e:
        logger.error(f"Error getting click dongy configuration: {e}")
        return 3